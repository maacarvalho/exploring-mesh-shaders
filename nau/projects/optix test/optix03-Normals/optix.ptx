//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-25769353
// Cuda compilation tools, release 10.1, V10.1.105
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	__closesthit__phong
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.const .align 8 .b8 optixLaunchParams[96];
.global .align 1 .b8 $str[45] = {61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 0};
.global .align 1 .b8 $str1[23] = {78, 97, 117, 32, 82, 97, 121, 45, 84, 114, 97, 99, 105, 110, 103, 32, 68, 101, 98, 117, 103, 10, 0};
.global .align 1 .b8 $str2[19] = {76, 97, 117, 110, 99, 104, 32, 100, 105, 109, 58, 32, 37, 117, 32, 37, 117, 10, 0};
.global .align 1 .b8 $str3[24] = {76, 105, 103, 104, 116, 68, 105, 114, 58, 32, 37, 102, 44, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0};

.visible .entry __closesthit__phong(

)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<102>;
	.reg .b32 	%r<8>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<30>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd8, %r1;
	shl.b64 	%rd9, %rd8, 32;
	cvt.u64.u32	%rd10, %r2;
	or.b64  	%rd1, %rd9, %rd10;
	// inline asm
	call (%rd7), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r3), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd11, [%rd7];
	mul.wide.s32 	%rd12, %r3, 12;
	add.s64 	%rd13, %rd11, %rd12;
	ld.u32 	%r4, [%rd13];
	ld.u32 	%r5, [%rd13+4];
	ld.u32 	%r6, [%rd13+8];
	// inline asm
	call (%f5, %f6), _optix_get_triangle_barycentrics, ();
	// inline asm
	mov.f32 	%f7, 0f3F800000;
	sub.ftz.f32 	%f8, %f7, %f5;
	sub.ftz.f32 	%f3, %f8, %f6;
	cvt.u64.u32	%rd3, %r4;
	ld.u64 	%rd14, [%rd7+16];
	mul.wide.u32 	%rd15, %r4, 16;
	add.s64 	%rd16, %rd14, %rd15;
	ld.v4.f32 	{%f9, %f10, %f11, %f12}, [%rd16];
	cvt.u64.u32	%rd4, %r5;
	mul.wide.u32 	%rd17, %r5, 16;
	add.s64 	%rd18, %rd14, %rd17;
	ld.v4.f32 	{%f16, %f17, %f18, %f19}, [%rd18];
	mul.ftz.f32 	%f23, %f5, %f16;
	mul.ftz.f32 	%f24, %f5, %f17;
	mul.ftz.f32 	%f25, %f5, %f18;
	fma.rn.ftz.f32 	%f26, %f9, %f3, %f23;
	fma.rn.ftz.f32 	%f27, %f10, %f3, %f24;
	fma.rn.ftz.f32 	%f28, %f11, %f3, %f25;
	cvt.u64.u32	%rd5, %r6;
	mul.wide.u32 	%rd19, %r6, 16;
	add.s64 	%rd20, %rd14, %rd19;
	ld.v4.f32 	{%f29, %f30, %f31, %f32}, [%rd20];
	fma.rn.ftz.f32 	%f36, %f6, %f29, %f26;
	fma.rn.ftz.f32 	%f37, %f6, %f30, %f27;
	fma.rn.ftz.f32 	%f38, %f6, %f31, %f28;
	ld.const.u64 	%rd21, [optixLaunchParams+88];
	cvta.to.global.u64 	%rd22, %rd21;
	ld.global.v4.f32 	{%f39, %f40, %f41, %f42}, [%rd22];
	mul.ftz.f32 	%f46, %f40, %f40;
	fma.rn.ftz.f32 	%f47, %f39, %f39, %f46;
	fma.rn.ftz.f32 	%f48, %f41, %f41, %f47;
	rsqrt.approx.ftz.f32 	%f49, %f48;
	mul.ftz.f32 	%f50, %f39, %f49;
	mul.ftz.f32 	%f51, %f40, %f49;
	mul.ftz.f32 	%f52, %f41, %f49;
	mul.ftz.f32 	%f53, %f37, %f37;
	fma.rn.ftz.f32 	%f54, %f36, %f36, %f53;
	fma.rn.ftz.f32 	%f55, %f38, %f38, %f54;
	rsqrt.approx.ftz.f32 	%f56, %f55;
	mul.ftz.f32 	%f57, %f36, %f56;
	mul.ftz.f32 	%f58, %f37, %f56;
	mul.ftz.f32 	%f59, %f38, %f56;
	mul.ftz.f32 	%f60, %f50, %f57;
	mul.ftz.f32 	%f61, %f51, %f58;
	neg.ftz.f32 	%f62, %f61;
	sub.ftz.f32 	%f63, %f62, %f60;
	mul.ftz.f32 	%f64, %f52, %f59;
	sub.ftz.f32 	%f65, %f63, %f64;
	mov.f32 	%f66, 0f00000000;
	max.ftz.f32 	%f67, %f65, %f66;
	add.ftz.f32 	%f68, %f67, 0f3E99999A;
	cvt.ftz.f64.f32	%fd1, %f68;
	mov.f64 	%fd2, 0d3FF0000000000000;
	min.f64 	%fd3, %fd2, %fd1;
	cvt.rn.ftz.f32.f64	%f4, %fd3;
	ld.u32 	%r7, [%rd7+48];
	setp.eq.s32	%p1, %r7, 0;
	@%p1 bra 	BB0_3;

	ld.u64 	%rd6, [%rd7+24];
	setp.eq.s64	%p2, %rd6, 0;
	@%p2 bra 	BB0_3;

	shl.b64 	%rd23, %rd3, 4;
	add.s64 	%rd24, %rd6, %rd23;
	ld.v2.f32 	{%f69, %f70}, [%rd24];
	shl.b64 	%rd25, %rd4, 4;
	add.s64 	%rd26, %rd6, %rd25;
	ld.v2.f32 	{%f73, %f74}, [%rd26];
	mul.ftz.f32 	%f77, %f5, %f73;
	mul.ftz.f32 	%f78, %f5, %f74;
	fma.rn.ftz.f32 	%f79, %f3, %f69, %f77;
	fma.rn.ftz.f32 	%f80, %f3, %f70, %f78;
	shl.b64 	%rd27, %rd5, 4;
	add.s64 	%rd28, %rd6, %rd27;
	ld.v2.f32 	{%f81, %f82}, [%rd28];
	fma.rn.ftz.f32 	%f85, %f6, %f81, %f79;
	fma.rn.ftz.f32 	%f86, %f6, %f82, %f80;
	ld.u64 	%rd29, [%rd7+56];
	tex.2d.v4.f32.f32	{%f87, %f88, %f89, %f90}, [%rd29, {%f85, %f86}];
	mul.ftz.f32 	%f91, %f4, %f87;
	mul.ftz.f32 	%f92, %f4, %f88;
	mul.ftz.f32 	%f93, %f4, %f89;
	st.f32 	[%rd1], %f91;
	st.f32 	[%rd1+4], %f92;
	st.f32 	[%rd1+8], %f93;
	bra.uni 	BB0_4;

BB0_3:
	ld.v2.f32 	{%f94, %f95}, [%rd7+64];
	mul.ftz.f32 	%f98, %f4, %f94;
	mul.ftz.f32 	%f99, %f4, %f95;
	ld.f32 	%f100, [%rd7+72];
	mul.ftz.f32 	%f101, %f4, %f100;
	st.f32 	[%rd1], %f98;
	st.f32 	[%rd1+4], %f99;
	st.f32 	[%rd1+8], %f101;

BB0_4:
	ret;
}

	// .globl	__anyhit__phong
.visible .entry __anyhit__phong(

)
{



	ret;
}

	// .globl	__miss__phong
.visible .entry __miss__phong(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__raygen__renderFrame
.visible .entry __raygen__renderFrame(

)
{
	.local .align 16 .b8 	__local_depot3[48];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .f32 	%f<65>;
	.reg .b32 	%r<38>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<23>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	// inline asm
	call (%r5), _optix_get_launch_index_x, ();
	// inline asm
	// inline asm
	call (%r6), _optix_get_launch_index_y, ();
	// inline asm
	or.b32  	%r11, %r6, %r5;
	ld.const.u32 	%r12, [optixLaunchParams];
	or.b32  	%r13, %r11, %r12;
	// inline asm
	call (%r8), _optix_get_launch_dimension_x, ();
	// inline asm
	// inline asm
	call (%r9), _optix_get_launch_dimension_y, ();
	// inline asm
	setp.ne.s32	%p1, %r13, 0;
	@%p1 bra 	BB3_2;

	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r14, [retval0+0];
	
	//{
	}// Callseq End 0
	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r15, [retval0+0];
	
	//{
	}// Callseq End 1
	add.u64 	%rd6, %SP, 16;
	add.u64 	%rd7, %SPL, 16;
	st.local.v2.u32 	[%rd7], {%r8, %r9};
	mov.u64 	%rd8, $str2;
	cvta.global.u64 	%rd9, %rd8;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r16, [retval0+0];
	
	//{
	}// Callseq End 2
	ld.const.u64 	%rd10, [optixLaunchParams+88];
	cvta.to.global.u64 	%rd11, %rd10;
	ld.global.v4.f32 	{%f1, %f2, %f3, %f4}, [%rd11];
	cvt.ftz.f64.f32	%fd1, %f2;
	cvt.ftz.f64.f32	%fd2, %f1;
	st.local.v2.f64 	[%rd7], {%fd2, %fd1};
	cvt.ftz.f64.f32	%fd3, %f4;
	cvt.ftz.f64.f32	%fd4, %f3;
	st.local.v2.f64 	[%rd7+16], {%fd4, %fd3};
	mov.u64 	%rd12, $str3;
	cvta.global.u64 	%rd13, %rd12;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd13;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r17, [retval0+0];
	
	//{
	}// Callseq End 3
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r18, [retval0+0];
	
	//{
	}// Callseq End 4

BB3_2:
	cvt.rn.f32.s32	%f18, %r5;
	add.ftz.f32 	%f19, %f18, 0f3F000000;
	cvt.rn.f32.s32	%f20, %r6;
	add.ftz.f32 	%f21, %f20, 0f3F000000;
	cvt.rn.f32.u32	%f22, %r8;
	div.approx.ftz.f32 	%f23, %f19, %f22;
	cvt.rn.f32.u32	%f24, %r9;
	div.approx.ftz.f32 	%f25, %f21, %f24;
	fma.rn.ftz.f32 	%f26, %f23, 0f40000000, 0fBF800000;
	fma.rn.ftz.f32 	%f27, %f25, 0f40000000, 0fBF800000;
	ld.const.v2.f32 	{%f28, %f29}, [optixLaunchParams+48];
	mov.u32 	%r25, 0;
	mov.u32 	%r24, 1;
	ld.const.v2.f32 	{%f32, %f33}, [optixLaunchParams+56];
	ld.const.v2.f32 	{%f36, %f37}, [optixLaunchParams+32];
	fma.rn.ftz.f32 	%f39, %f28, %f26, %f37;
	ld.const.v2.f32 	{%f40, %f41}, [optixLaunchParams+40];
	fma.rn.ftz.f32 	%f44, %f26, %f29, %f40;
	fma.rn.ftz.f32 	%f45, %f26, %f32, %f41;
	ld.const.v2.f32 	{%f46, %f47}, [optixLaunchParams+64];
	fma.rn.ftz.f32 	%f50, %f27, %f33, %f39;
	fma.rn.ftz.f32 	%f51, %f27, %f46, %f44;
	fma.rn.ftz.f32 	%f52, %f27, %f47, %f45;
	mul.ftz.f32 	%f53, %f51, %f51;
	fma.rn.ftz.f32 	%f54, %f50, %f50, %f53;
	fma.rn.ftz.f32 	%f55, %f52, %f52, %f54;
	rsqrt.approx.ftz.f32 	%f56, %f55;
	mul.ftz.f32 	%f12, %f50, %f56;
	mul.ftz.f32 	%f13, %f51, %f56;
	mul.ftz.f32 	%f14, %f52, %f56;
	add.u64 	%rd15, %SP, 0;
	add.u64 	%rd16, %SPL, 0;
	mov.u64 	%rd17, 1065353216;
	st.local.u32 	[%rd16+4], %rd17;
	st.local.u32 	[%rd16], %rd17;
	mov.u32 	%r28, 1065353216;
	st.local.u32 	[%rd16+8], %r28;
	shr.u64 	%rd18, %rd15, 32;
	cvt.u32.u64	%r26, %rd18;
	cvt.u32.u64	%r27, %rd15;
	ld.const.u64 	%rd14, [optixLaunchParams+80];
	ld.const.v2.f32 	{%f57, %f58}, [optixLaunchParams+24];
	mov.u32 	%r21, 255;
	mov.f32 	%f15, 0f3C23D70A;
	mov.f32 	%f16, 0f60AD78EC;
	mov.f32 	%f17, 0f00000000;
	// inline asm
	call (%r19, %r20), _optix_trace_2, (%rd14, %f57, %f58, %f36, %f12, %f13, %f14, %f15, %f16, %f17, %r21, %r25, %r25, %r24, %r25, %r26, %r27);
	// inline asm
	ld.local.f32 	%f59, [%rd16];
	mul.ftz.f32 	%f60, %f59, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r29, %f60;
	ld.local.f32 	%f61, [%rd16+4];
	mul.ftz.f32 	%f62, %f61, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r30, %f62;
	ld.local.f32 	%f63, [%rd16+8];
	mul.ftz.f32 	%f64, %f63, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r31, %f64;
	shl.b32 	%r32, %r30, 8;
	shl.b32 	%r33, %r31, 16;
	or.b32  	%r34, %r29, %r32;
	or.b32  	%r35, %r34, %r33;
	or.b32  	%r36, %r35, -16777216;
	mad.lo.s32 	%r37, %r8, %r6, %r5;
	ld.const.u64 	%rd19, [optixLaunchParams+8];
	cvta.to.global.u64 	%rd20, %rd19;
	mul.wide.u32 	%rd21, %r37, 4;
	add.s64 	%rd22, %rd20, %rd21;
	st.global.u32 	[%rd22], %r36;
	ret;
}


