//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-25769353
// Cuda compilation tools, release 10.1, V10.1.105
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	__closesthit__phong
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd
(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
;
.const .align 8 .b8 optixLaunchParams[96];
.global .align 1 .b8 $str[45] = {61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 0};
.global .align 1 .b8 $str1[29] = {78, 97, 117, 32, 82, 97, 121, 45, 84, 114, 97, 99, 105, 110, 103, 32, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 10, 0};
.global .align 1 .b8 $str2[21] = {76, 117, 110, 99, 104, 32, 115, 105, 122, 101, 58, 32, 37, 105, 32, 120, 32, 37, 105, 10, 0};
.global .align 1 .b8 $str3[28] = {67, 97, 109, 101, 114, 97, 32, 68, 105, 114, 101, 99, 116, 105, 111, 110, 58, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0};
.const .align 8 .b8 __cudart_i2opi_d[144] = {8, 93, 141, 31, 177, 95, 251, 107, 234, 146, 82, 138, 247, 57, 7, 61, 123, 241, 229, 235, 199, 186, 39, 117, 45, 234, 95, 158, 102, 63, 70, 79, 183, 9, 203, 39, 207, 126, 54, 109, 31, 109, 10, 90, 139, 17, 47, 239, 15, 152, 5, 222, 255, 151, 248, 31, 59, 40, 249, 189, 139, 95, 132, 156, 244, 57, 83, 131, 57, 214, 145, 57, 65, 126, 95, 180, 38, 112, 156, 233, 132, 68, 187, 46, 245, 53, 130, 232, 62, 167, 41, 177, 28, 235, 29, 254, 28, 146, 209, 9, 234, 46, 73, 6, 224, 210, 77, 66, 58, 110, 36, 183, 97, 197, 187, 222, 171, 99, 81, 254, 65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};
.const .align 8 .b8 __cudart_sin_cos_coeffs[128] = {186, 94, 120, 249, 101, 219, 229, 61, 70, 210, 176, 44, 241, 229, 90, 190, 146, 227, 172, 105, 227, 29, 199, 62, 161, 98, 219, 25, 160, 1, 42, 191, 24, 8, 17, 17, 17, 17, 129, 63, 84, 85, 85, 85, 85, 85, 197, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 129, 253, 32, 131, 255, 168, 189, 40, 133, 239, 193, 167, 238, 33, 62, 217, 230, 6, 142, 79, 126, 146, 190, 233, 188, 221, 25, 160, 1, 250, 62, 71, 93, 193, 22, 108, 193, 86, 191, 81, 85, 85, 85, 85, 85, 165, 63, 0, 0, 0, 0, 0, 0, 224, 191, 0, 0, 0, 0, 0, 0, 240, 63};

.visible .entry __closesthit__phong(

)
{



	ret;
}

	// .globl	__anyhit__phong
.visible .entry __anyhit__phong(

)
{



	ret;
}

	// .globl	__miss__phong
.visible .entry __miss__phong(

)
{



	ret;
}

	// .globl	__raygen__renderFrame
.visible .entry __raygen__renderFrame(

)
{
	.local .align 8 .b8 	__local_depot3[32];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<7>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<38>;
	.reg .f64 	%fd<49>;
	.reg .b64 	%rd<22>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd2, %SP, 24;
	add.u64 	%rd1, %SPL, 24;
	// inline asm
	call (%r10), _optix_get_launch_index_x, ();
	// inline asm
	// inline asm
	call (%r11), _optix_get_launch_index_y, ();
	// inline asm
	// inline asm
	call (%r13), _optix_get_launch_dimension_x, ();
	// inline asm
	cvt.rn.f64.u32	%fd14, %r10;
	ld.const.u32 	%r4, [optixLaunchParams];
	cvt.rn.f64.s32	%fd15, %r4;
	fma.rn.f64 	%fd16, %fd15, 0d3FB999999999999A, %fd14;
	mul.f64 	%fd45, %fd16, 0d3FC99999A0000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r16}, %fd45;
	}
	and.b32  	%r17, %r16, 2147483647;
	setp.ne.s32	%p1, %r17, 2146435072;
	@%p1 bra 	BB3_3;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r18, %temp}, %fd45;
	}
	setp.ne.s32	%p2, %r18, 0;
	@%p2 bra 	BB3_3;

	mov.f64 	%fd17, 0d0000000000000000;
	mul.rn.f64 	%fd45, %fd45, %fd17;

BB3_3:
	mul.f64 	%fd18, %fd45, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r37, %fd18;
	st.local.u32 	[%rd1], %r37;
	cvt.rn.f64.s32	%fd19, %r37;
	neg.f64 	%fd20, %fd19;
	mov.f64 	%fd21, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd22, %fd20, %fd21, %fd45;
	mov.f64 	%fd23, 0d3C91A62633145C00;
	fma.rn.f64 	%fd24, %fd20, %fd23, %fd22;
	mov.f64 	%fd25, 0d397B839A252049C0;
	fma.rn.f64 	%fd46, %fd20, %fd25, %fd24;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r19}, %fd45;
	}
	and.b32  	%r20, %r19, 2145386496;
	setp.lt.u32	%p3, %r20, 1105199104;
	@%p3 bra 	BB3_5;

	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd45;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd2;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd46, [retval0+0];
	
	//{
	}// Callseq End 0
	ld.local.u32 	%r37, [%rd1];

BB3_5:
	add.s32 	%r8, %r37, 1;
	and.b32  	%r21, %r8, 1;
	shl.b32 	%r22, %r21, 3;
	setp.eq.s32	%p4, %r21, 0;
	selp.f64	%fd26, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p4;
	mul.wide.u32 	%rd4, %r22, 8;
	mov.u64 	%rd5, __cudart_sin_cos_coeffs;
	add.s64 	%rd6, %rd4, %rd5;
	ld.const.f64 	%fd27, [%rd6+8];
	mul.rn.f64 	%fd7, %fd46, %fd46;
	fma.rn.f64 	%fd28, %fd26, %fd7, %fd27;
	ld.const.f64 	%fd29, [%rd6+16];
	fma.rn.f64 	%fd30, %fd28, %fd7, %fd29;
	ld.const.f64 	%fd31, [%rd6+24];
	fma.rn.f64 	%fd32, %fd30, %fd7, %fd31;
	ld.const.f64 	%fd33, [%rd6+32];
	fma.rn.f64 	%fd34, %fd32, %fd7, %fd33;
	ld.const.f64 	%fd35, [%rd6+40];
	fma.rn.f64 	%fd36, %fd34, %fd7, %fd35;
	ld.const.f64 	%fd37, [%rd6+48];
	fma.rn.f64 	%fd8, %fd36, %fd7, %fd37;
	fma.rn.f64 	%fd47, %fd8, %fd46, %fd46;
	@%p4 bra 	BB3_7;

	mov.f64 	%fd38, 0d3FF0000000000000;
	fma.rn.f64 	%fd47, %fd8, %fd7, %fd38;

BB3_7:
	and.b32  	%r23, %r8, 2;
	setp.eq.s32	%p5, %r23, 0;
	@%p5 bra 	BB3_9;

	mov.f64 	%fd39, 0d0000000000000000;
	mov.f64 	%fd40, 0dBFF0000000000000;
	fma.rn.f64 	%fd47, %fd47, %fd40, %fd39;

BB3_9:
	fma.rn.f64 	%fd41, %fd47, 0d3FE0000000000000, 0d3FE0000000000000;
	cvt.rn.ftz.f32.f64	%f1, %fd41;
	mul.ftz.f32 	%f2, %f1, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r24, %f2;
	mov.f32 	%f3, 0f3F800000;
	sub.ftz.f32 	%f4, %f3, %f2;
	cvt.rzi.ftz.s32.f32	%r25, %f4;
	shl.b32 	%r26, %r24, 8;
	shl.b32 	%r27, %r25, 16;
	or.b32  	%r9, %r26, %r27;
	or.b32  	%r28, %r11, %r10;
	or.b32  	%r29, %r28, %r4;
	setp.ne.s32	%p6, %r29, 0;
	@%p6 bra 	BB3_11;

	mov.u64 	%rd7, $str;
	cvta.global.u64 	%rd8, %rd7;
	mov.u64 	%rd9, 0;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r30, [retval0+0];
	
	//{
	}// Callseq End 1
	mov.u64 	%rd10, $str1;
	cvta.global.u64 	%rd11, %rd10;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r31, [retval0+0];
	
	//{
	}// Callseq End 2
	add.u64 	%rd12, %SP, 0;
	add.u64 	%rd13, %SPL, 0;
	st.local.v2.u32 	[%rd13], {%r10, %r11};
	mov.u64 	%rd14, $str2;
	cvta.global.u64 	%rd15, %rd14;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd15;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r32, [retval0+0];
	
	//{
	}// Callseq End 3
	ld.const.f32 	%f5, [optixLaunchParams+36];
	cvt.ftz.f64.f32	%fd42, %f5;
	ld.const.v2.f32 	{%f6, %f7}, [optixLaunchParams+40];
	cvt.ftz.f64.f32	%fd43, %f6;
	cvt.ftz.f64.f32	%fd44, %f7;
	st.local.f64 	[%rd13], %fd42;
	st.local.f64 	[%rd13+8], %fd43;
	st.local.f64 	[%rd13+16], %fd44;
	mov.u64 	%rd16, $str3;
	cvta.global.u64 	%rd17, %rd16;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd17;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd12;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r33, [retval0+0];
	
	//{
	}// Callseq End 4
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r34, [retval0+0];
	
	//{
	}// Callseq End 5

BB3_11:
	ld.const.u64 	%rd18, [optixLaunchParams+8];
	cvta.to.global.u64 	%rd19, %rd18;
	mad.lo.s32 	%r35, %r11, %r13, %r10;
	mul.wide.u32 	%rd20, %r35, 4;
	add.s64 	%rd21, %rd19, %rd20;
	or.b32  	%r36, %r9, -16777216;
	st.global.u32 	[%rd21], %r36;
	ret;
}

.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
{
	.local .align 8 .b8 	__local_depot4[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<101>;


	mov.u64 	%SPL, __local_depot4;
	ld.param.f64 	%fd4, [__internal_trig_reduction_slowpathd_param_0];
	ld.param.u64 	%rd37, [__internal_trig_reduction_slowpathd_param_1];
	add.u64 	%rd1, %SPL, 0;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd4;
	}
	and.b32  	%r40, %r1, -2147483648;
	shr.u32 	%r3, %r1, 20;
	bfe.u32 	%r4, %r1, 20, 11;
	setp.eq.s32	%p1, %r4, 2047;
	@%p1 bra 	BB4_13;

	add.s32 	%r15, %r4, -1024;
	shr.u32 	%r16, %r15, 6;
	mov.u32 	%r17, 15;
	sub.s32 	%r5, %r17, %r16;
	mov.u32 	%r18, 19;
	sub.s32 	%r19, %r18, %r16;
	mov.u32 	%r20, 18;
	min.s32 	%r6, %r20, %r19;
	mov.u64 	%rd94, 0;
	setp.ge.s32	%p2, %r5, %r6;
	mov.u64 	%rd93, %rd1;
	@%p2 bra 	BB4_4;

	bfe.u32 	%r21, %r1, 20, 11;
	add.s32 	%r22, %r21, -1024;
	shr.u32 	%r23, %r22, 6;
	sub.s32 	%r25, %r17, %r23;
	mul.wide.s32 	%rd41, %r25, 8;
	mov.u64 	%rd42, __cudart_i2opi_d;
	add.s64 	%rd89, %rd42, %rd41;
	mov.b64 	 %rd43, %fd4;
	shl.b64 	%rd44, %rd43, 11;
	or.b64  	%rd5, %rd44, -9223372036854775808;
	mov.u64 	%rd94, 0;
	mov.u64 	%rd93, %rd1;
	mov.u64 	%rd91, %rd1;
	mov.u32 	%r39, %r5;

BB4_3:
	.pragma "nounroll";
	ld.const.u64 	%rd47, [%rd89];
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi, clo, chi;
	mov.b64         {alo,ahi}, %rd47;    
	mov.b64         {blo,bhi}, %rd5;    
	mov.b64         {clo,chi}, %rd94;    
	mad.lo.cc.u32   r0, alo, blo, clo;
	madc.hi.cc.u32  r1, alo, blo, chi;
	madc.hi.u32     r2, alo, bhi,   0;
	mad.lo.cc.u32   r1, alo, bhi,  r1;
	madc.hi.cc.u32  r2, ahi, blo,  r2;
	madc.hi.u32     r3, ahi, bhi,   0;
	mad.lo.cc.u32   r1, ahi, blo,  r1;
	madc.lo.cc.u32  r2, ahi, bhi,  r2;
	addc.u32        r3,  r3,   0;     
	mov.b64         %rd45, {r0,r1};      
	mov.b64         %rd94, {r2,r3};      
	}
	// inline asm
	st.local.u64 	[%rd91], %rd45;
	add.s32 	%r39, %r39, 1;
	sub.s32 	%r26, %r39, %r5;
	mul.wide.s32 	%rd50, %r26, 8;
	add.s64 	%rd91, %rd1, %rd50;
	add.s64 	%rd93, %rd93, 8;
	add.s64 	%rd89, %rd89, 8;
	setp.lt.s32	%p3, %r39, %r6;
	@%p3 bra 	BB4_3;

BB4_4:
	st.local.u64 	[%rd93], %rd94;
	ld.local.u64 	%rd95, [%rd1+16];
	ld.local.u64 	%rd96, [%rd1+24];
	and.b32  	%r9, %r3, 63;
	setp.eq.s32	%p4, %r9, 0;
	@%p4 bra 	BB4_6;

	mov.u32 	%r27, 64;
	sub.s32 	%r28, %r27, %r9;
	shl.b64 	%rd51, %rd96, %r9;
	shr.u64 	%rd52, %rd95, %r28;
	or.b64  	%rd96, %rd51, %rd52;
	shl.b64 	%rd53, %rd95, %r9;
	ld.local.u64 	%rd54, [%rd1+8];
	shr.u64 	%rd55, %rd54, %r28;
	or.b64  	%rd95, %rd55, %rd53;

BB4_6:
	shr.u64 	%rd56, %rd96, 62;
	cvt.u32.u64	%r29, %rd56;
	shr.u64 	%rd57, %rd95, 62;
	shl.b64 	%rd58, %rd96, 2;
	or.b64  	%rd98, %rd58, %rd57;
	shl.b64 	%rd97, %rd95, 2;
	shr.u64 	%rd59, %rd96, 61;
	cvt.u32.u64	%r30, %rd59;
	and.b32  	%r31, %r30, 1;
	add.s32 	%r32, %r31, %r29;
	neg.s32 	%r33, %r32;
	setp.eq.s32	%p5, %r40, 0;
	selp.b32	%r34, %r32, %r33, %p5;
	cvta.to.local.u64 	%rd60, %rd37;
	st.local.u32 	[%rd60], %r34;
	setp.eq.s32	%p6, %r31, 0;
	@%p6 bra 	BB4_8;

	mov.u64 	%rd64, 0;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd64;
	mov.b64         {a2,a3}, %rd64;
	mov.b64         {b0,b1}, %rd97;
	mov.b64         {b2,b3}, %rd98;
	sub.cc.u32      r0, a0, b0; 
	subc.cc.u32     r1, a1, b1; 
	subc.cc.u32     r2, a2, b2; 
	subc.u32        r3, a3, b3; 
	mov.b64         %rd97, {r0,r1};
	mov.b64         %rd98, {r2,r3};
	}
	// inline asm
	xor.b32  	%r40, %r40, -2147483648;

BB4_8:
	clz.b64 	%r41, %rd98;
	setp.eq.s32	%p7, %r41, 0;
	@%p7 bra 	BB4_10;

	shl.b64 	%rd67, %rd98, %r41;
	mov.u32 	%r35, 64;
	sub.s32 	%r36, %r35, %r41;
	shr.u64 	%rd68, %rd97, %r36;
	or.b64  	%rd98, %rd68, %rd67;

BB4_10:
	mov.u64 	%rd72, -3958705157555305931;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi;
	mov.b64         {alo,ahi}, %rd98;   
	mov.b64         {blo,bhi}, %rd72;   
	mul.lo.u32      r0, alo, blo;    
	mul.hi.u32      r1, alo, blo;    
	mad.lo.cc.u32   r1, alo, bhi, r1;
	madc.hi.u32     r2, alo, bhi,  0;
	mad.lo.cc.u32   r1, ahi, blo, r1;
	madc.hi.cc.u32  r2, ahi, blo, r2;
	madc.hi.u32     r3, ahi, bhi,  0;
	mad.lo.cc.u32   r2, ahi, bhi, r2;
	addc.u32        r3, r3,  0;      
	mov.b64         %rd69, {r0,r1};     
	mov.b64         %rd100, {r2,r3};     
	}
	// inline asm
	setp.lt.s64	%p8, %rd100, 1;
	@%p8 bra 	BB4_12;

	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd69;
	mov.b64         {a2,a3}, %rd100;
	mov.b64         {b0,b1}, %rd69;
	mov.b64         {b2,b3}, %rd100;
	add.cc.u32      r0, a0, b0; 
	addc.cc.u32     r1, a1, b1; 
	addc.cc.u32     r2, a2, b2; 
	addc.u32        r3, a3, b3; 
	mov.b64         %rd73, {r0,r1};
	mov.b64         %rd100, {r2,r3};
	}
	// inline asm
	add.s32 	%r41, %r41, 1;

BB4_12:
	cvt.u64.u32	%rd79, %r40;
	shl.b64 	%rd80, %rd79, 32;
	mov.u32 	%r37, 1022;
	sub.s32 	%r38, %r37, %r41;
	cvt.u64.u32	%rd81, %r38;
	shl.b64 	%rd82, %rd81, 52;
	add.s64 	%rd83, %rd100, 1;
	shr.u64 	%rd84, %rd83, 10;
	add.s64 	%rd85, %rd84, 1;
	shr.u64 	%rd86, %rd85, 1;
	add.s64 	%rd87, %rd86, %rd82;
	or.b64  	%rd88, %rd87, %rd80;
	mov.b64 	 %fd4, %rd88;

BB4_13:
	st.param.f64	[func_retval0+0], %fd4;
	ret;
}


