//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-25769353
// Cuda compilation tools, release 10.1, V10.1.105
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	__closesthit__radiance
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.const .align 8 .b8 optixLaunchParams[96];
.global .align 1 .b8 $str[45] = {61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 0};
.global .align 1 .b8 $str1[23] = {78, 97, 117, 32, 82, 97, 121, 45, 84, 114, 97, 99, 105, 110, 103, 32, 68, 101, 98, 117, 103, 10, 0};
.global .align 1 .b8 $str2[24] = {76, 105, 103, 104, 116, 68, 105, 114, 58, 32, 37, 102, 44, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0};
.global .align 1 .b8 $str3[19] = {76, 97, 117, 110, 99, 104, 32, 100, 105, 109, 58, 32, 37, 117, 32, 37, 117, 10, 0};

.visible .entry __closesthit__radiance(

)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .f32 	%f<121>;
	.reg .b32 	%r<18>;
	.reg .f64 	%fd<9>;
	.reg .b64 	%rd<34>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd10, %SP, 0;
	add.u64 	%rd1, %SPL, 0;
	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd11, %r1;
	shl.b64 	%rd12, %rd11, 32;
	cvt.u64.u32	%rd13, %r2;
	or.b64  	%rd2, %rd12, %rd13;
	// inline asm
	call (%rd8), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r3), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd14, [%rd8];
	mul.wide.s32 	%rd15, %r3, 12;
	add.s64 	%rd16, %rd14, %rd15;
	ld.u32 	%r13, [%rd16];
	ld.u32 	%r14, [%rd16+4];
	ld.u32 	%r15, [%rd16+8];
	// inline asm
	call (%f4, %f5), _optix_get_triangle_barycentrics, ();
	// inline asm
	mov.f32 	%f22, 0f3F800000;
	sub.ftz.f32 	%f23, %f22, %f4;
	sub.ftz.f32 	%f24, %f23, %f5;
	cvt.u64.u32	%rd4, %r13;
	ld.u64 	%rd17, [%rd8+16];
	mul.wide.u32 	%rd18, %r13, 16;
	add.s64 	%rd19, %rd17, %rd18;
	ld.v4.f32 	{%f25, %f26, %f27, %f28}, [%rd19];
	mov.u32 	%r10, 1;
	mov.u32 	%r9, 2;
	cvt.u64.u32	%rd5, %r14;
	mul.wide.u32 	%rd20, %r14, 16;
	add.s64 	%rd21, %rd17, %rd20;
	ld.v4.f32 	{%f32, %f33, %f34, %f35}, [%rd21];
	mul.ftz.f32 	%f39, %f4, %f32;
	mul.ftz.f32 	%f40, %f4, %f33;
	mul.ftz.f32 	%f41, %f4, %f34;
	fma.rn.ftz.f32 	%f42, %f25, %f24, %f39;
	fma.rn.ftz.f32 	%f43, %f26, %f24, %f40;
	fma.rn.ftz.f32 	%f44, %f27, %f24, %f41;
	cvt.u64.u32	%rd6, %r15;
	mul.wide.u32 	%rd22, %r15, 16;
	add.s64 	%rd23, %rd17, %rd22;
	ld.v4.f32 	{%f45, %f46, %f47, %f48}, [%rd23];
	fma.rn.ftz.f32 	%f52, %f5, %f45, %f42;
	fma.rn.ftz.f32 	%f53, %f5, %f46, %f43;
	fma.rn.ftz.f32 	%f54, %f5, %f47, %f44;
	ld.const.u64 	%rd24, [optixLaunchParams+88];
	cvta.to.global.u64 	%rd25, %rd24;
	ld.global.v4.f32 	{%f55, %f56, %f57, %f58}, [%rd25];
	mul.ftz.f32 	%f62, %f56, %f56;
	fma.rn.ftz.f32 	%f63, %f55, %f55, %f62;
	fma.rn.ftz.f32 	%f64, %f57, %f57, %f63;
	rsqrt.approx.ftz.f32 	%f65, %f64;
	mul.ftz.f32 	%f66, %f55, %f65;
	neg.ftz.f32 	%f16, %f66;
	mul.ftz.f32 	%f67, %f56, %f65;
	neg.ftz.f32 	%f17, %f67;
	mul.ftz.f32 	%f68, %f57, %f65;
	neg.ftz.f32 	%f18, %f68;
	mul.ftz.f32 	%f69, %f53, %f53;
	fma.rn.ftz.f32 	%f70, %f52, %f52, %f69;
	fma.rn.ftz.f32 	%f71, %f54, %f54, %f70;
	rsqrt.approx.ftz.f32 	%f72, %f71;
	mul.ftz.f32 	%f73, %f52, %f72;
	mul.ftz.f32 	%f74, %f53, %f72;
	mul.ftz.f32 	%f75, %f54, %f72;
	mul.ftz.f32 	%f76, %f73, %f16;
	mul.ftz.f32 	%f77, %f74, %f67;
	sub.ftz.f32 	%f78, %f76, %f77;
	mul.ftz.f32 	%f79, %f75, %f68;
	sub.ftz.f32 	%f80, %f78, %f79;
	mov.f32 	%f21, 0f00000000;
	max.ftz.f32 	%f3, %f80, %f21;
	mov.u32 	%r16, 1065353216;
	st.local.u32 	[%rd1], %r16;
	shr.u64 	%rd26, %rd10, 32;
	cvt.u32.u64	%r11, %rd26;
	cvt.u32.u64	%r12, %rd10;
	// inline asm
	call (%f6), _optix_get_world_ray_origin_x, ();
	// inline asm
	// inline asm
	call (%f7), _optix_get_world_ray_origin_y, ();
	// inline asm
	// inline asm
	call (%f8), _optix_get_world_ray_origin_z, ();
	// inline asm
	// inline asm
	call (%f9), _optix_get_ray_tmax, ();
	// inline asm
	// inline asm
	call (%f10), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f11), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f12), _optix_get_world_ray_direction_z, ();
	// inline asm
	fma.rn.ftz.f32 	%f13, %f9, %f10, %f6;
	fma.rn.ftz.f32 	%f14, %f9, %f11, %f7;
	fma.rn.ftz.f32 	%f15, %f9, %f12, %f8;
	ld.const.u64 	%rd9, [optixLaunchParams+80];
	mov.u32 	%r6, 255;
	mov.u32 	%r7, 4;
	mov.f32 	%f19, 0f3A83126F;
	mov.f32 	%f20, 0f60AD78EC;
	// inline asm
	call (%r4, %r5), _optix_trace_2, (%rd9, %f13, %f14, %f15, %f16, %f17, %f18, %f19, %f20, %f21, %r6, %r7, %r10, %r9, %r10, %r11, %r12);
	// inline asm
	ld.u32 	%r17, [%rd8+48];
	setp.eq.s32	%p1, %r17, 0;
	@%p1 bra 	BB0_3;

	ld.u64 	%rd7, [%rd8+24];
	setp.eq.s64	%p2, %rd7, 0;
	@%p2 bra 	BB0_3;

	shl.b64 	%rd27, %rd4, 4;
	add.s64 	%rd28, %rd7, %rd27;
	ld.v2.f32 	{%f81, %f82}, [%rd28];
	shl.b64 	%rd29, %rd5, 4;
	add.s64 	%rd30, %rd7, %rd29;
	ld.v2.f32 	{%f88, %f89}, [%rd30];
	mul.ftz.f32 	%f92, %f4, %f88;
	mul.ftz.f32 	%f93, %f4, %f89;
	fma.rn.ftz.f32 	%f94, %f24, %f81, %f92;
	fma.rn.ftz.f32 	%f95, %f24, %f82, %f93;
	shl.b64 	%rd31, %rd6, 4;
	add.s64 	%rd32, %rd7, %rd31;
	ld.v2.f32 	{%f96, %f97}, [%rd32];
	fma.rn.ftz.f32 	%f100, %f5, %f96, %f94;
	fma.rn.ftz.f32 	%f101, %f5, %f97, %f95;
	ld.u64 	%rd33, [%rd8+56];
	tex.2d.v4.f32.f32	{%f102, %f103, %f104, %f105}, [%rd33, {%f100, %f101}];
	ld.local.f32 	%f106, [%rd1];
	mul.ftz.f32 	%f107, %f3, %f106;
	cvt.ftz.f64.f32	%fd1, %f107;
	add.f64 	%fd2, %fd1, 0d3FD3333333333333;
	mov.f64 	%fd3, 0d3FF0000000000000;
	min.f64 	%fd4, %fd2, %fd3;
	cvt.rn.ftz.f32.f64	%f108, %fd4;
	mul.ftz.f32 	%f109, %f108, %f102;
	mul.ftz.f32 	%f110, %f108, %f103;
	mul.ftz.f32 	%f111, %f108, %f104;
	st.f32 	[%rd2], %f109;
	st.f32 	[%rd2+4], %f110;
	st.f32 	[%rd2+8], %f111;
	bra.uni 	BB0_4;

BB0_3:
	ld.local.f32 	%f112, [%rd1];
	mul.ftz.f32 	%f113, %f3, %f112;
	cvt.ftz.f64.f32	%fd5, %f113;
	add.f64 	%fd6, %fd5, 0d3FD3333333333333;
	mov.f64 	%fd7, 0d3FF0000000000000;
	min.f64 	%fd8, %fd6, %fd7;
	cvt.rn.ftz.f32.f64	%f114, %fd8;
	ld.f32 	%f115, [%rd8+64];
	mul.ftz.f32 	%f116, %f115, %f114;
	ld.f32 	%f117, [%rd8+68];
	mul.ftz.f32 	%f118, %f114, %f117;
	ld.f32 	%f119, [%rd8+72];
	mul.ftz.f32 	%f120, %f114, %f119;
	st.f32 	[%rd2], %f116;
	st.f32 	[%rd2+4], %f118;
	st.f32 	[%rd2+8], %f120;

BB0_4:
	ret;
}

	// .globl	__anyhit__radiance
.visible .entry __anyhit__radiance(

)
{



	ret;
}

	// .globl	__miss__radiance
.visible .entry __miss__radiance(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__closesthit__shadow
.visible .entry __closesthit__shadow(

)
{



	ret;
}

	// .globl	__anyhit__shadow
.visible .entry __anyhit__shadow(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u32 	%r3, 0;
	st.u32 	[%rd4], %r3;
	ret;
}

	// .globl	__miss__shadow
.visible .entry __miss__shadow(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4], %r3;
	ret;
}

	// .globl	__closesthit__phong_alphaTrans
.visible .entry __closesthit__phong_alphaTrans(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 1045220557;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1045220557;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__anyhit__phong_alphaTrans
.visible .entry __anyhit__phong_alphaTrans(

)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<28>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<13>;


	// inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd2, [%rd1];
	mul.wide.s32 	%rd3, %r1, 12;
	add.s64 	%rd4, %rd2, %rd3;
	ld.u32 	%r2, [%rd4];
	ld.u32 	%r3, [%rd4+4];
	ld.u32 	%r4, [%rd4+8];
	// inline asm
	call (%f1, %f2), _optix_get_triangle_barycentrics, ();
	// inline asm
	mov.f32 	%f3, 0f3F800000;
	sub.ftz.f32 	%f4, %f3, %f1;
	sub.ftz.f32 	%f5, %f4, %f2;
	ld.u64 	%rd5, [%rd1+24];
	mul.wide.u32 	%rd6, %r2, 16;
	add.s64 	%rd7, %rd5, %rd6;
	ld.v2.f32 	{%f6, %f7}, [%rd7];
	mul.ftz.f32 	%f10, %f6, %f5;
	mul.wide.u32 	%rd8, %r3, 16;
	add.s64 	%rd9, %rd5, %rd8;
	ld.v2.f32 	{%f11, %f12}, [%rd9];
	mul.ftz.f32 	%f15, %f1, %f12;
	fma.rn.ftz.f32 	%f16, %f1, %f11, %f10;
	fma.rn.ftz.f32 	%f17, %f7, %f5, %f15;
	mul.wide.u32 	%rd10, %r4, 16;
	add.s64 	%rd11, %rd5, %rd10;
	ld.v2.f32 	{%f18, %f19}, [%rd11];
	fma.rn.ftz.f32 	%f22, %f2, %f18, %f16;
	fma.rn.ftz.f32 	%f23, %f2, %f19, %f17;
	ld.u64 	%rd12, [%rd1+56];
	tex.2d.v4.f32.f32	{%f24, %f25, %f26, %f27}, [%rd12, {%f22, %f23}];
	setp.geu.ftz.f32	%p1, %f27, 0f3E800000;
	@%p1 bra 	BB7_2;

	// inline asm
	call _optix_ignore_intersection, ();
	// inline asm

BB7_2:
	ret;
}

	// .globl	__miss__phong_alphaTrans
.visible .entry __miss__phong_alphaTrans(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__closesthit__shadow_alphaTrans
.visible .entry __closesthit__shadow_alphaTrans(

)
{



	ret;
}

	// .globl	__anyhit__shadow_alphaTrans
.visible .entry __anyhit__shadow_alphaTrans(

)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<28>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<17>;


	// inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd2, [%rd1];
	mul.wide.s32 	%rd3, %r1, 12;
	add.s64 	%rd4, %rd2, %rd3;
	ld.u32 	%r2, [%rd4];
	ld.u32 	%r3, [%rd4+4];
	ld.u32 	%r4, [%rd4+8];
	// inline asm
	call (%f1, %f2), _optix_get_triangle_barycentrics, ();
	// inline asm
	mov.f32 	%f3, 0f3F800000;
	sub.ftz.f32 	%f4, %f3, %f1;
	sub.ftz.f32 	%f5, %f4, %f2;
	ld.u64 	%rd5, [%rd1+24];
	mul.wide.u32 	%rd6, %r2, 16;
	add.s64 	%rd7, %rd5, %rd6;
	ld.v2.f32 	{%f6, %f7}, [%rd7];
	mul.ftz.f32 	%f10, %f6, %f5;
	mul.wide.u32 	%rd8, %r3, 16;
	add.s64 	%rd9, %rd5, %rd8;
	ld.v2.f32 	{%f11, %f12}, [%rd9];
	mul.ftz.f32 	%f15, %f1, %f12;
	fma.rn.ftz.f32 	%f16, %f1, %f11, %f10;
	fma.rn.ftz.f32 	%f17, %f7, %f5, %f15;
	mul.wide.u32 	%rd10, %r4, 16;
	add.s64 	%rd11, %rd5, %rd10;
	ld.v2.f32 	{%f18, %f19}, [%rd11];
	fma.rn.ftz.f32 	%f22, %f2, %f18, %f16;
	fma.rn.ftz.f32 	%f23, %f2, %f19, %f17;
	ld.u64 	%rd12, [%rd1+56];
	tex.2d.v4.f32.f32	{%f24, %f25, %f26, %f27}, [%rd12, {%f22, %f23}];
	setp.lt.ftz.f32	%p1, %f27, 0f3E800000;
	@%p1 bra 	BB10_2;
	bra.uni 	BB10_1;

BB10_2:
	// inline asm
	call _optix_ignore_intersection, ();
	// inline asm
	bra.uni 	BB10_3;

BB10_1:
	// inline asm
	call (%r5), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r6), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd13, %r5;
	shl.b64 	%rd14, %rd13, 32;
	cvt.u64.u32	%rd15, %r6;
	or.b64  	%rd16, %rd14, %rd15;
	mov.u32 	%r7, 0;
	st.u32 	[%rd16], %r7;

BB10_3:
	ret;
}

	// .globl	__miss__shadow_alphaTrans
.visible .entry __miss__shadow_alphaTrans(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4], %r3;
	ret;
}

	// .globl	__closesthit__phong_glass
.visible .entry __closesthit__phong_glass(

)
{
	.local .align 4 .b8 	__local_depot12[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<23>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<10>;


	mov.u64 	%SPL, __local_depot12;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd2, %SP, 0;
	add.u64 	%rd3, %SPL, 0;
	mov.u64 	%rd4, 1065353216;
	st.local.u32 	[%rd3+4], %rd4;
	st.local.u32 	[%rd3], %rd4;
	mov.u32 	%r12, 1065353216;
	st.local.u32 	[%rd3+8], %r12;
	shr.u64 	%rd5, %rd2, 32;
	cvt.u32.u64	%r8, %rd5;
	cvt.u32.u64	%r9, %rd2;
	// inline asm
	call (%f1), _optix_get_world_ray_origin_x, ();
	// inline asm
	// inline asm
	call (%f2), _optix_get_world_ray_origin_y, ();
	// inline asm
	// inline asm
	call (%f3), _optix_get_world_ray_origin_z, ();
	// inline asm
	// inline asm
	call (%f4), _optix_get_ray_tmax, ();
	// inline asm
	// inline asm
	call (%f5), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f6), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f7), _optix_get_world_ray_direction_z, ();
	// inline asm
	fma.rn.ftz.f32 	%f8, %f4, %f5, %f1;
	fma.rn.ftz.f32 	%f9, %f4, %f6, %f2;
	fma.rn.ftz.f32 	%f10, %f4, %f7, %f3;
	ld.const.u64 	%rd1, [optixLaunchParams+80];
	mov.u32 	%r3, 255;
	mov.u32 	%r6, 2;
	mov.u32 	%r7, 0;
	mov.f32 	%f14, 0f3A83126F;
	mov.f32 	%f15, 0f60AD78EC;
	mov.f32 	%f16, 0f00000000;
	// inline asm
	call (%r1, %r2), _optix_trace_2, (%rd1, %f8, %f9, %f10, %f5, %f6, %f7, %f14, %f15, %f16, %r3, %r7, %r7, %r6, %r7, %r8, %r9);
	// inline asm
	// inline asm
	call (%r10), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r11), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd6, %r10;
	shl.b64 	%rd7, %rd6, 32;
	cvt.u64.u32	%rd8, %r11;
	or.b64  	%rd9, %rd7, %rd8;
	ld.local.f32 	%f17, [%rd3];
	mul.ftz.f32 	%f18, %f17, 0f3F4CCCCD;
	ld.local.f32 	%f19, [%rd3+4];
	mul.ftz.f32 	%f20, %f19, 0f3F4CCCCD;
	ld.local.f32 	%f21, [%rd3+8];
	mul.ftz.f32 	%f22, %f21, 0f3F4CCCCD;
	st.f32 	[%rd9], %f18;
	st.f32 	[%rd9+4], %f20;
	st.f32 	[%rd9+8], %f22;
	ret;
}

	// .globl	__anyhit__phong_glass
.visible .entry __anyhit__phong_glass(

)
{



	ret;
}

	// .globl	__miss__phong_glass
.visible .entry __miss__phong_glass(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__closesthit__shadow_glass
.visible .entry __closesthit__shadow_glass(

)
{
	.local .align 4 .b8 	__local_depot15[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<9>;


	mov.u64 	%SPL, __local_depot15;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd2, %SP, 0;
	add.u64 	%rd3, %SPL, 0;
	mov.u32 	%r12, 1065353216;
	st.local.u32 	[%rd3], %r12;
	shr.u64 	%rd4, %rd2, 32;
	cvt.u32.u64	%r8, %rd4;
	cvt.u32.u64	%r9, %rd2;
	// inline asm
	call (%f1), _optix_get_world_ray_origin_x, ();
	// inline asm
	// inline asm
	call (%f2), _optix_get_world_ray_origin_y, ();
	// inline asm
	// inline asm
	call (%f3), _optix_get_world_ray_origin_z, ();
	// inline asm
	// inline asm
	call (%f4), _optix_get_ray_tmax, ();
	// inline asm
	// inline asm
	call (%f5), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f6), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f7), _optix_get_world_ray_direction_z, ();
	// inline asm
	fma.rn.ftz.f32 	%f8, %f4, %f5, %f1;
	fma.rn.ftz.f32 	%f9, %f4, %f6, %f2;
	fma.rn.ftz.f32 	%f10, %f4, %f7, %f3;
	ld.const.u64 	%rd1, [optixLaunchParams+80];
	mov.u32 	%r3, 255;
	mov.u32 	%r4, 0;
	mov.u32 	%r6, 2;
	mov.u32 	%r7, 1;
	mov.f32 	%f14, 0f3A83126F;
	mov.f32 	%f15, 0f60AD78EC;
	mov.f32 	%f16, 0f00000000;
	// inline asm
	call (%r1, %r2), _optix_trace_2, (%rd1, %f8, %f9, %f10, %f5, %f6, %f7, %f14, %f15, %f16, %r3, %r4, %r7, %r6, %r7, %r8, %r9);
	// inline asm
	// inline asm
	call (%r10), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r11), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd5, %r10;
	shl.b64 	%rd6, %rd5, 32;
	cvt.u64.u32	%rd7, %r11;
	or.b64  	%rd8, %rd6, %rd7;
	ld.local.f32 	%f17, [%rd3];
	mul.ftz.f32 	%f18, %f17, 0f3F4CCCCD;
	st.f32 	[%rd8], %f18;
	ret;
}

	// .globl	__anyhit__shadow_glass
.visible .entry __anyhit__shadow_glass(

)
{



	ret;
}

	// .globl	__miss__shadow_glass
.visible .entry __miss__shadow_glass(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4], %r3;
	ret;
}

	// .globl	__raygen__renderFrame
.visible .entry __raygen__renderFrame(

)
{
	.local .align 16 .b8 	__local_depot18[48];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .f32 	%f<65>;
	.reg .b32 	%r<38>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<23>;


	mov.u64 	%SPL, __local_depot18;
	cvta.local.u64 	%SP, %SPL;
	// inline asm
	call (%r5), _optix_get_launch_index_x, ();
	// inline asm
	// inline asm
	call (%r6), _optix_get_launch_index_y, ();
	// inline asm
	or.b32  	%r11, %r6, %r5;
	ld.const.u32 	%r12, [optixLaunchParams];
	or.b32  	%r13, %r11, %r12;
	// inline asm
	call (%r8), _optix_get_launch_dimension_x, ();
	// inline asm
	// inline asm
	call (%r9), _optix_get_launch_dimension_y, ();
	// inline asm
	setp.ne.s32	%p1, %r13, 0;
	@%p1 bra 	BB18_2;

	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r14, [retval0+0];
	
	//{
	}// Callseq End 0
	mov.u64 	%rd4, $str1;
	cvta.global.u64 	%rd5, %rd4;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r15, [retval0+0];
	
	//{
	}// Callseq End 1
	ld.const.u64 	%rd6, [optixLaunchParams+88];
	cvta.to.global.u64 	%rd7, %rd6;
	ld.global.v4.f32 	{%f1, %f2, %f3, %f4}, [%rd7];
	cvt.ftz.f64.f32	%fd1, %f2;
	cvt.ftz.f64.f32	%fd2, %f1;
	add.u64 	%rd8, %SP, 16;
	add.u64 	%rd9, %SPL, 16;
	st.local.v2.f64 	[%rd9], {%fd2, %fd1};
	cvt.ftz.f64.f32	%fd3, %f4;
	cvt.ftz.f64.f32	%fd4, %f3;
	st.local.v2.f64 	[%rd9+16], {%fd4, %fd3};
	mov.u64 	%rd10, $str2;
	cvta.global.u64 	%rd11, %rd10;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd8;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r16, [retval0+0];
	
	//{
	}// Callseq End 2
	st.local.v2.u32 	[%rd9], {%r8, %r9};
	mov.u64 	%rd12, $str3;
	cvta.global.u64 	%rd13, %rd12;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd13;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd8;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r17, [retval0+0];
	
	//{
	}// Callseq End 3
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r18, [retval0+0];
	
	//{
	}// Callseq End 4

BB18_2:
	add.u64 	%rd15, %SP, 0;
	add.u64 	%rd16, %SPL, 0;
	mov.u64 	%rd17, 1065353216;
	st.local.u32 	[%rd16+4], %rd17;
	st.local.u32 	[%rd16], %rd17;
	mov.u32 	%r28, 1065353216;
	st.local.u32 	[%rd16+8], %r28;
	shr.u64 	%rd18, %rd15, 32;
	cvt.u32.u64	%r26, %rd18;
	cvt.u32.u64	%r27, %rd15;
	cvt.rn.f32.s32	%f18, %r5;
	add.ftz.f32 	%f19, %f18, 0f3F000000;
	cvt.rn.f32.s32	%f20, %r6;
	add.ftz.f32 	%f21, %f20, 0f3F000000;
	cvt.rn.f32.u32	%f22, %r8;
	div.approx.ftz.f32 	%f23, %f19, %f22;
	cvt.rn.f32.u32	%f24, %r9;
	div.approx.ftz.f32 	%f25, %f21, %f24;
	fma.rn.ftz.f32 	%f26, %f23, 0f40000000, 0fBF800000;
	fma.rn.ftz.f32 	%f27, %f25, 0f40000000, 0fBF800000;
	ld.const.v2.f32 	{%f28, %f29}, [optixLaunchParams+48];
	mov.u32 	%r25, 0;
	ld.const.v2.f32 	{%f32, %f33}, [optixLaunchParams+56];
	ld.const.v2.f32 	{%f36, %f37}, [optixLaunchParams+32];
	fma.rn.ftz.f32 	%f39, %f28, %f26, %f37;
	ld.const.v2.f32 	{%f40, %f41}, [optixLaunchParams+40];
	fma.rn.ftz.f32 	%f44, %f26, %f29, %f40;
	fma.rn.ftz.f32 	%f45, %f26, %f32, %f41;
	ld.const.v2.f32 	{%f46, %f47}, [optixLaunchParams+64];
	fma.rn.ftz.f32 	%f50, %f27, %f33, %f39;
	fma.rn.ftz.f32 	%f51, %f27, %f46, %f44;
	fma.rn.ftz.f32 	%f52, %f27, %f47, %f45;
	mul.ftz.f32 	%f53, %f51, %f51;
	fma.rn.ftz.f32 	%f54, %f50, %f50, %f53;
	fma.rn.ftz.f32 	%f55, %f52, %f52, %f54;
	rsqrt.approx.ftz.f32 	%f56, %f55;
	mul.ftz.f32 	%f12, %f50, %f56;
	mul.ftz.f32 	%f13, %f51, %f56;
	mul.ftz.f32 	%f14, %f52, %f56;
	ld.const.u64 	%rd14, [optixLaunchParams+80];
	ld.const.v2.f32 	{%f57, %f58}, [optixLaunchParams+24];
	mov.u32 	%r21, 255;
	mov.u32 	%r24, 2;
	mov.f32 	%f16, 0f60AD78EC;
	mov.f32 	%f17, 0f00000000;
	// inline asm
	call (%r19, %r20), _optix_trace_2, (%rd14, %f57, %f58, %f36, %f12, %f13, %f14, %f17, %f16, %f17, %r21, %r25, %r25, %r24, %r25, %r26, %r27);
	// inline asm
	ld.local.f32 	%f59, [%rd16];
	mul.ftz.f32 	%f60, %f59, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r29, %f60;
	ld.local.f32 	%f61, [%rd16+4];
	mul.ftz.f32 	%f62, %f61, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r30, %f62;
	ld.local.f32 	%f63, [%rd16+8];
	mul.ftz.f32 	%f64, %f63, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r31, %f64;
	shl.b32 	%r32, %r30, 8;
	shl.b32 	%r33, %r31, 16;
	or.b32  	%r34, %r29, %r32;
	or.b32  	%r35, %r34, %r33;
	or.b32  	%r36, %r35, -16777216;
	mad.lo.s32 	%r37, %r8, %r6, %r5;
	ld.const.u64 	%rd19, [optixLaunchParams+8];
	cvta.to.global.u64 	%rd20, %rd19;
	mul.wide.u32 	%rd21, %r37, 4;
	add.s64 	%rd22, %rd20, %rd21;
	st.global.u32 	[%rd22], %r36;
	ret;
}


