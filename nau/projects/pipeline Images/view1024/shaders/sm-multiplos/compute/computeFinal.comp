#version 430

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
//Ver melhor o que faz as variaveis e ver mais info sobre Computer Shaders para ver como meter isto numa IMAGE_1D

layout(std430, binding = 1) buffer workGroupBuffer {	//ceil(sqrt(atomico))
	uint p[];
};

layout(std430, binding = 3) buffer testBuffer {			//vec2 com posição no ecra
	vec2 screenPos[];  
};

layout(std430, binding = 4) buffer hitsBuffer {
	vec4 hits[];
};

precision lowp float; 

shared vec4 f;

uniform writeonly image2D imageUnit;
uniform int RenderTargetX;
uniform int RenderTargetY;

//JA ESTA DIREITO?
void main() 
{	
 	//ivec2 v = ivec2(gl_GlobalInvocationID.xy);
	uint indice = gl_GlobalInvocationID.x * p[0] + gl_GlobalInvocationID.y;
	
	ivec2 i = ivec2( screenPos[indice]* vec2(RenderTargetX,RenderTargetY) );
	int coordB = i.x * RenderTargetY + i.y;
	
	barrier();
	
	vec4 cor = vec4(0);
	
	//Buscar a info ao Buffer Hits
	vec4 infoPrime = hits[indice];
	bool intersectou = (infoPrime.y >= 0.0);
	
	if (intersectou) {
		cor = vec4(1.0,0.0,0.0,1.0); //Sombra
	}
	else {
		cor = vec4(0.0,0.0,1.0,1.0); //Luz
	}
 
	imageStore(imageUnit, i, cor); 
} 
