//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21112126
// Cuda compilation tools, release 8.0, V8.0.43
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_20
.address_size 64

	// .globl	_Z13buffer_camerav
.global .align 16 .b8 lightDir[16];
.global .align 8 .b8 top_object[4];
.global .align 1 .b8 vertex_buffer[1];
.global .align 1 .b8 index_buffer[1];
.global .texref pos_buffer;
.global .align 1 .b8 output0[1];
.global .align 4 .b8 ray[36];
.global .align 8 .b8 launch_index[8];
.global .align 8 .b8 launch_dim[8];
.global .align 16 .b8 prdr[16];
.global .align 4 .u32 Shadow;
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo8lightDirE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10top_objectE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10launch_dimE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4prdrE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6ShadowE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8lightDirE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename10top_objectE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_typename12launch_indexE[6] = {117, 105, 110, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename10launch_dimE[6] = {117, 105, 110, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename4prdrE[17] = {80, 101, 114, 82, 97, 121, 68, 97, 116, 97, 82, 101, 115, 117, 108, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename6ShadowE[4] = {105, 110, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum8lightDirE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10top_objectE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10launch_dimE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4prdrE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6ShadowE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic8lightDirE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10top_objectE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic10launch_dimE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic4prdrE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6ShadowE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8lightDirE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10top_objectE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10launch_dimE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4prdrE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6ShadowE[1];

.visible .entry _Z13buffer_camerav(

)
{
	.local .align 16 .b8 	__local_depot0[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .f32 	%f<32>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<13>;


	mov.u64 	%rd12, __local_depot0;
	cvta.local.u64 	%SP, %rd12;
	ldu.global.v2.u32 	{%r1, %r2}, [launch_index];
	cvt.rn.f32.u32	%f5, %r1;
	cvt.rn.f32.u32	%f6, %r2;
	tex.2d.v4.f32.f32	{%f1, %f2, %f3, %f4}, [pos_buffer, {%f5, %f6}];
	add.u64 	%rd3, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd3;
	mov.f32 	%f7, 0f3F800000;
	st.local.v4.f32 	[%rd1], {%f7, %f7, %f7, %f7};
	setp.gt.ftz.f32	%p1, %f4, 0f00000000;
	@%p1 bra 	BB0_2;
	bra.uni 	BB0_1;

BB0_2:
	ld.global.v4.f32 	{%f17, %f18, %f19, %f20}, [lightDir];
	neg.ftz.f32 	%f12, %f17;
	neg.ftz.f32 	%f13, %f18;
	neg.ftz.f32 	%f14, %f19;
	ld.global.u32 	%r5, [top_object];
	mov.u32 	%r6, 0;
	mov.f32 	%f15, 0f38D1B717;
	mov.f32 	%f16, 0f6C4ECB8F;
	mov.u32 	%r7, 16;
	// inline asm
	call _rt_trace_64, (%r5, %f1, %f2, %f3, %f12, %f13, %f14, %r6, %f15, %f16, %rd3, %r7);
	// inline asm
	bra.uni 	BB0_3;

BB0_1:
	st.local.v4.f32 	[%rd1], {%f7, %f7, %f7, %f7};

BB0_3:
	ld.global.v2.u32 	{%r10, %r11}, [launch_index];
	cvt.u64.u32	%rd7, %r10;
	cvt.u64.u32	%rd8, %r11;
	mov.u64 	%rd11, output0;
	cvta.global.u64 	%rd6, %rd11;
	mov.u32 	%r8, 2;
	mov.u32 	%r9, 16;
	mov.u64 	%rd10, 0;
	// inline asm
	call (%rd5), _rt_buffer_get_64, (%rd6, %r8, %r9, %rd7, %rd8, %rd10, %rd10);
	// inline asm
	ld.local.v4.f32 	{%f24, %f25, %f26, %f27}, [%rd1];
	st.v4.f32 	[%rd5], {%f24, %f25, %f26, %f27};
	ret;
}

	// .globl	_Z14any_hit_shadowv
.visible .entry _Z14any_hit_shadowv(

)
{
	.reg .f32 	%f<2>;


	mov.f32 	%f1, 0f00000000;
	st.global.v4.f32 	[prdr], {%f1, %f1, %f1, %f1};
	// inline asm
	call _rt_terminate_ray, ();
	// inline asm
	ret;
}

	// .globl	_Z9exceptionv
.visible .entry _Z9exceptionv(

)
{
	.reg .f32 	%f<3>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<8>;


	ld.global.v2.u32 	{%r3, %r4}, [launch_index];
	cvt.u64.u32	%rd3, %r3;
	cvt.u64.u32	%rd4, %r4;
	mov.u64 	%rd7, output0;
	cvta.global.u64 	%rd2, %rd7;
	mov.u32 	%r1, 2;
	mov.u32 	%r2, 16;
	mov.u64 	%rd6, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r1, %r2, %rd3, %rd4, %rd6, %rd6);
	// inline asm
	mov.f32 	%f1, 0f00000000;
	mov.f32 	%f2, 0f3F800000;
	st.v4.f32 	[%rd1], {%f2, %f1, %f1, %f2};
	ret;
}

	// .globl	_Z20geometryintersectioni
.visible .entry _Z20geometryintersectioni(
	.param .u32 _Z20geometryintersectioni_param_0
)
{
	.reg .pred 	%p<11>;
	.reg .f32 	%f<75>;
	.reg .b32 	%r<20>;
	.reg .b64 	%rd<39>;


	ld.param.u32 	%r13, [_Z20geometryintersectioni_param_0];
	mul.lo.s32 	%r14, %r13, 3;
	cvt.s64.s32	%rd3, %r14;
	mov.u64 	%rd37, index_buffer;
	cvta.global.u64 	%rd2, %rd37;
	mov.u32 	%r11, 1;
	mov.u32 	%r10, 4;
	mov.u64 	%rd36, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r11, %r10, %rd3, %rd36, %rd36, %rd36);
	// inline asm
	ld.u32 	%rd9, [%rd1];
	mov.u64 	%rd38, vertex_buffer;
	cvta.global.u64 	%rd8, %rd38;
	mov.u32 	%r12, 16;
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r11, %r12, %rd9, %rd36, %rd36, %rd36);
	// inline asm
	ld.v4.f32 	{%f2, %f3, %f4, %f5}, [%rd7];
	add.s32 	%r15, %r14, 1;
	cvt.s64.s32	%rd15, %r15;
	// inline asm
	call (%rd13), _rt_buffer_get_64, (%rd2, %r11, %r10, %rd15, %rd36, %rd36, %rd36);
	// inline asm
	ld.u32 	%rd21, [%rd13];
	// inline asm
	call (%rd19), _rt_buffer_get_64, (%rd8, %r11, %r12, %rd21, %rd36, %rd36, %rd36);
	// inline asm
	ld.v4.f32 	{%f9, %f10, %f11, %f12}, [%rd19];
	add.s32 	%r16, %r14, 2;
	cvt.s64.s32	%rd27, %r16;
	// inline asm
	call (%rd25), _rt_buffer_get_64, (%rd2, %r11, %r10, %rd27, %rd36, %rd36, %rd36);
	// inline asm
	ld.u32 	%rd33, [%rd25];
	// inline asm
	call (%rd31), _rt_buffer_get_64, (%rd8, %r11, %r12, %rd33, %rd36, %rd36, %rd36);
	// inline asm
	sub.ftz.f32 	%f16, %f9, %f2;
	sub.ftz.f32 	%f17, %f10, %f3;
	sub.ftz.f32 	%f18, %f11, %f4;
	ld.v4.f32 	{%f19, %f20, %f21, %f22}, [%rd31];
	sub.ftz.f32 	%f26, %f2, %f19;
	sub.ftz.f32 	%f27, %f3, %f20;
	sub.ftz.f32 	%f28, %f4, %f21;
	mul.ftz.f32 	%f29, %f18, %f27;
	mul.ftz.f32 	%f30, %f17, %f28;
	sub.ftz.f32 	%f31, %f29, %f30;
	mul.ftz.f32 	%f32, %f16, %f28;
	mul.ftz.f32 	%f33, %f18, %f26;
	sub.ftz.f32 	%f34, %f32, %f33;
	mul.ftz.f32 	%f35, %f17, %f26;
	mul.ftz.f32 	%f36, %f16, %f27;
	sub.ftz.f32 	%f37, %f35, %f36;
	ld.global.f32 	%f38, [ray+12];
	ld.global.f32 	%f39, [ray+16];
	mul.ftz.f32 	%f40, %f39, %f34;
	fma.rn.ftz.f32 	%f41, %f38, %f31, %f40;
	ld.global.f32 	%f42, [ray+20];
	fma.rn.ftz.f32 	%f43, %f42, %f37, %f41;
	rcp.approx.ftz.f32 	%f44, %f43;
	ld.global.f32 	%f45, [ray];
	sub.ftz.f32 	%f46, %f2, %f45;
	ld.global.f32 	%f47, [ray+4];
	sub.ftz.f32 	%f48, %f3, %f47;
	ld.global.f32 	%f49, [ray+8];
	sub.ftz.f32 	%f50, %f4, %f49;
	mul.ftz.f32 	%f51, %f44, %f46;
	mul.ftz.f32 	%f52, %f44, %f48;
	mul.ftz.f32 	%f53, %f44, %f50;
	mul.ftz.f32 	%f54, %f39, %f53;
	mul.ftz.f32 	%f55, %f52, %f42;
	sub.ftz.f32 	%f56, %f54, %f55;
	mul.ftz.f32 	%f57, %f51, %f42;
	mul.ftz.f32 	%f58, %f53, %f38;
	sub.ftz.f32 	%f59, %f57, %f58;
	mul.ftz.f32 	%f60, %f52, %f38;
	mul.ftz.f32 	%f61, %f51, %f39;
	sub.ftz.f32 	%f62, %f60, %f61;
	mul.ftz.f32 	%f63, %f27, %f59;
	fma.rn.ftz.f32 	%f64, %f26, %f56, %f63;
	fma.rn.ftz.f32 	%f65, %f28, %f62, %f64;
	mul.ftz.f32 	%f66, %f17, %f59;
	fma.rn.ftz.f32 	%f67, %f16, %f56, %f66;
	fma.rn.ftz.f32 	%f68, %f18, %f62, %f67;
	mul.ftz.f32 	%f69, %f34, %f52;
	fma.rn.ftz.f32 	%f70, %f31, %f51, %f69;
	fma.rn.ftz.f32 	%f1, %f37, %f53, %f70;
	ld.global.f32 	%f71, [ray+32];
	setp.lt.ftz.f32	%p1, %f1, %f71;
	ld.global.f32 	%f72, [ray+28];
	setp.gt.ftz.f32	%p2, %f1, %f72;
	and.pred  	%p3, %p1, %p2;
	setp.ge.ftz.f32	%p4, %f65, 0f00000000;
	and.pred  	%p5, %p3, %p4;
	setp.ge.ftz.f32	%p6, %f68, 0f00000000;
	and.pred  	%p7, %p5, %p6;
	add.ftz.f32 	%f73, %f65, %f68;
	setp.le.ftz.f32	%p8, %f73, 0f3F800000;
	and.pred  	%p9, %p7, %p8;
	@!%p9 bra 	BB3_3;
	bra.uni 	BB3_1;

BB3_1:
	// inline asm
	call (%r17), _rt_potential_intersection, (%f1);
	// inline asm
	setp.eq.s32	%p10, %r17, 0;
	@%p10 bra 	BB3_3;

	mov.u32 	%r19, 0;
	// inline asm
	call (%r18), _rt_report_intersection, (%r19);
	// inline asm

BB3_3:
	ret;
}

	// .globl	_Z11boundingboxiPf
.visible .entry _Z11boundingboxiPf(
	.param .u32 _Z11boundingboxiPf_param_0,
	.param .u64 _Z11boundingboxiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<54>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<42>;


	ld.param.u32 	%r13, [_Z11boundingboxiPf_param_0];
	ld.param.u64 	%rd3, [_Z11boundingboxiPf_param_1];
	mul.lo.s32 	%r14, %r13, 3;
	cvt.s64.s32	%rd6, %r14;
	mov.u64 	%rd40, index_buffer;
	cvta.global.u64 	%rd5, %rd40;
	mov.u32 	%r11, 1;
	mov.u32 	%r10, 4;
	mov.u64 	%rd39, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r11, %r10, %rd6, %rd39, %rd39, %rd39);
	// inline asm
	ld.u32 	%rd12, [%rd4];
	mov.u64 	%rd41, vertex_buffer;
	cvta.global.u64 	%rd11, %rd41;
	mov.u32 	%r12, 16;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r11, %r12, %rd12, %rd39, %rd39, %rd39);
	// inline asm
	ld.v4.f32 	{%f11, %f12, %f13, %f14}, [%rd10];
	add.s32 	%r15, %r14, 1;
	cvt.s64.s32	%rd18, %r15;
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd5, %r11, %r10, %rd18, %rd39, %rd39, %rd39);
	// inline asm
	ld.u32 	%rd24, [%rd16];
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd11, %r11, %r12, %rd24, %rd39, %rd39, %rd39);
	// inline asm
	ld.v4.f32 	{%f15, %f16, %f17, %f18}, [%rd22];
	add.s32 	%r16, %r14, 2;
	cvt.s64.s32	%rd30, %r16;
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd5, %r11, %r10, %rd30, %rd39, %rd39, %rd39);
	// inline asm
	ld.u32 	%rd36, [%rd28];
	// inline asm
	call (%rd34), _rt_buffer_get_64, (%rd11, %r11, %r12, %rd36, %rd39, %rd39, %rd39);
	// inline asm
	sub.ftz.f32 	%f19, %f15, %f11;
	sub.ftz.f32 	%f20, %f16, %f12;
	sub.ftz.f32 	%f21, %f17, %f13;
	ld.v4.f32 	{%f22, %f23, %f24, %f25}, [%rd34];
	sub.ftz.f32 	%f26, %f22, %f11;
	sub.ftz.f32 	%f27, %f23, %f12;
	sub.ftz.f32 	%f28, %f24, %f13;
	mul.ftz.f32 	%f29, %f20, %f28;
	mul.ftz.f32 	%f30, %f21, %f27;
	sub.ftz.f32 	%f31, %f29, %f30;
	mul.ftz.f32 	%f32, %f21, %f26;
	mul.ftz.f32 	%f33, %f19, %f28;
	sub.ftz.f32 	%f34, %f32, %f33;
	mul.ftz.f32 	%f35, %f19, %f27;
	mul.ftz.f32 	%f36, %f20, %f26;
	sub.ftz.f32 	%f37, %f35, %f36;
	mul.ftz.f32 	%f38, %f34, %f34;
	fma.rn.ftz.f32 	%f39, %f31, %f31, %f38;
	fma.rn.ftz.f32 	%f40, %f37, %f37, %f39;
	sqrt.approx.ftz.f32 	%f10, %f40;
	mov.pred 	%p5, 0;
	setp.leu.ftz.f32	%p4, %f10, 0f00000000;
	@%p4 bra 	BB4_2;

	abs.ftz.f32 	%f41, %f10;
	setp.neu.ftz.f32	%p5, %f41, 0f7F800000;

BB4_2:
	cvta.to.global.u64 	%rd2, %rd3;
	@%p5 bra 	BB4_4;
	bra.uni 	BB4_3;

BB4_4:
	min.ftz.f32 	%f42, %f11, %f15;
	min.ftz.f32 	%f43, %f42, %f22;
	min.ftz.f32 	%f44, %f12, %f16;
	min.ftz.f32 	%f45, %f44, %f23;
	min.ftz.f32 	%f46, %f13, %f17;
	min.ftz.f32 	%f47, %f46, %f24;
	st.global.f32 	[%rd2], %f43;
	st.global.f32 	[%rd2+4], %f45;
	st.global.f32 	[%rd2+8], %f47;
	max.ftz.f32 	%f48, %f11, %f15;
	max.ftz.f32 	%f49, %f48, %f22;
	max.ftz.f32 	%f50, %f12, %f16;
	max.ftz.f32 	%f51, %f50, %f23;
	max.ftz.f32 	%f52, %f13, %f17;
	max.ftz.f32 	%f53, %f52, %f24;
	st.global.f32 	[%rd2+12], %f49;
	st.global.f32 	[%rd2+16], %f51;
	st.global.f32 	[%rd2+20], %f53;
	bra.uni 	BB4_5;

BB4_3:
	mov.u32 	%r17, 2096152002;
	st.global.u32 	[%rd2+8], %r17;
	st.global.u32 	[%rd2+4], %r17;
	st.global.u32 	[%rd2], %r17;
	mov.u32 	%r18, -51331646;
	st.global.u32 	[%rd2+20], %r18;
	st.global.u32 	[%rd2+16], %r18;
	st.global.u32 	[%rd2+12], %r18;

BB4_5:
	ret;
}


