#version 460
#extension GL_NV_mesh_shader : require
 
layout(local_size_x=32) in;
layout(triangles, max_vertices=256, max_primitives=512) out;

taskNV in perTaskData {
  uint task_id;
} t_in;

out PerVertexData
{
  vec3 normal;
  vec2 texCoord;
} v_out[];   

uniform mat4 m_pvm;
uniform mat3 m_normal;

uniform float scale;

layout(std430, binding = 1) readonly buffer verticesBuffer
{
  float vertices[];
};

layout(std430, binding = 2) readonly buffer normalsBuffer
{
  float normals[];
};

layout(std430, binding = 3) readonly buffer texcoordsBuffer
{
  float texCoords[];
};

layout(std430, binding = 4) readonly buffer indicesBuffer
{
  uint indices[];
};

layout(std430, binding = 5) readonly buffer primitivesBuffer
{
  uint primitives[];
};

layout(std430, binding = 6) readonly buffer meshletsBuffer
{
    uint meshlets[];
};

vec4 transform (vec4 vertex) {
    
    vec4 v = vertex + vec4(float(t_in.task_id) * 0.5, 0, 0, 0);
    return v;

}

void main()
{

  // Inputs
  uint local_id  = gl_LocalInvocationID.x;
  uint global_id  = gl_GlobalInvocationID.x;
  uint meshlet_id = gl_WorkGroupID.x;
  uint workg_len = gl_WorkGroupSize.x;

  // Meshlet Info
  uint indices_start = meshlets[meshlet_id * 4 + 0];
  uint indices_count = meshlets[meshlet_id * 4 + 1];
  uint primitives_start = meshlets[meshlet_id * 4 + 2];
  uint primitives_count = meshlets[meshlet_id * 4 + 3];

  // No. Primitives
  gl_PrimitiveCountNV = primitives_count / 3;

  // Vertices
  uint vertices_per_thread = (indices_count + workg_len - 1) / workg_len;
  for (int i=0; i < vertices_per_thread; i++) {

    uint idx = min (i * workg_len + local_id, indices_count - 1);
    uint index = indices[indices_start + idx];

    vec4 vertex = vec4(scale * vertices[index * 4 + 0],
                       scale * vertices[index * 4 + 1],
                       scale * vertices[index * 4 + 2],
                       vertices[index * 4 + 3]);

    vec3 normal = vec3(normals[index * 3 + 0],
                       normals[index * 3 + 1],
                       normals[index * 3 + 2]);

    vec2 texCoord = vec2(texCoords[index * 2 + 0],
                         texCoords[index * 2 + 1]);

    gl_MeshVerticesNV[idx].gl_Position = m_pvm * transform(vertex);
    v_out[idx].normal = m_normal * normal;
    v_out[idx].texCoord = texCoord;
  }

  // Primitives
  uint primitives_per_thread = (primitives_count / 3 + workg_len - 1) / workg_len;
  for (int i=0; i < primitives_per_thread; i++) {

    uint idx = min ((i * workg_len + local_id) * 3, primitives_count - 3);

    gl_PrimitiveIndicesNV[idx + 0] = primitives[primitives_start + idx + 0];
    gl_PrimitiveIndicesNV[idx + 1] = primitives[primitives_start + idx + 1];
    gl_PrimitiveIndicesNV[idx + 2] = primitives[primitives_start + idx + 2];

  }
 
}
