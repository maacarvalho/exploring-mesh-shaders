

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform int destMipLevel = 0;
layout(binding = 1, rgba32f) writeonly uniform image2DArray imageUnit;

uniform sampler2DArray tex;

#if (FOAM == NO_FOAM)
int maxLayers = 2;
#elif (FOAM == USE_JACOBIAN)
int maxLayers = 2;
#else // USE_VERTICAL_ACCELERATION
int maxLayers = 2;
#endif

void main()
{
	for (int i = 0; i < maxLayers; ++i) {
		int srcMipLevel = destMipLevel - 1;
		ivec2 dstPos = ivec2(gl_GlobalInvocationID);
		ivec2 srcPos = dstPos * 2;
		vec3 srcColor0 = texelFetch(tex, ivec3(srcPos + ivec2(0, 0), i), srcMipLevel).rgb;
		vec3 srcColor1 = texelFetch(tex, ivec3(srcPos + ivec2(1, 0), i), srcMipLevel).rgb;
		vec3 srcColor2 = texelFetch(tex, ivec3(srcPos + ivec2(0, 1), i), srcMipLevel).rgb;
		vec3 srcColor3 = texelFetch(tex, ivec3(srcPos + ivec2(1, 1), i), srcMipLevel).rgb;
		
		float maxLum, minLum;
		
		if (srcMipLevel == 0) {
			minLum = min(min(srcColor0.r, srcColor1.r), min(srcColor2.r, srcColor3.r));
			maxLum = max(max(srcColor0.r, srcColor1.r), max(srcColor2.r, srcColor3.r));
		}
		else  {
			minLum = min(min(srcColor0.g, srcColor1.g), min(srcColor2.g, srcColor3.g));
			maxLum = max(max(srcColor0.b, srcColor1.b), max(srcColor2.b, srcColor3.b));
		}
		float average = 0.25 * (srcColor0.r + srcColor1.r + srcColor2.r + srcColor3.r);
		imageStore(imageUnit, ivec3(dstPos,i), vec4(average, minLum, maxLum, 0));
	}
}
