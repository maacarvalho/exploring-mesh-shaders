

layout (local_size_x = 8, local_size_y = 4) in;

// ping pong textures
layout (binding = 0, rgba32f) uniform image2DArray pingpong0;
layout (binding = 1, rgba32f) uniform image2DArray pingpong1;

uniform int pingpong;
uniform int log_width;
uniform int stage;
uniform int layerCount = 8;

vec4 complexMultTwice(vec2 v0, vec4 v1) {
	return vec4(v0.x * v1.x - v0.y * v1.y,
				v0.x * v1.y + v0.y * v1.x,
				v0.x * v1.z - v0.y * v1.w,
				v0.x * v1.w + v0.y * v1.z);
}


vec2 w(int k, int nn) {

	float it =  2 * k * M_PI / nn;
	return vec2(cos(it), sin(it));
}


uint bitReverse(int k) {
	uint br = bitfieldReverse(uint(k));
	br = bitfieldExtract(br, 32 - log_width, log_width);
	return br;
}


void main() {


	int line = int(gl_GlobalInvocationID.x);
	int column = int(gl_GlobalInvocationID.y);
	
	int iter = int(pow(2,log_width-1));
	
	int halfGroupSize = int(pow(2, stage));
	int groupSize = 2 * halfGroupSize;
	int k = column % halfGroupSize;
	int group = column / halfGroupSize;
	int shift = int(pow(2, stage));
	int groupShift = shift * 2;

	int index = k + group * groupShift;
	
	vec2 ww = w(k, groupShift);

	uint c,cs;	
	if (stage == 0) {
		c = bitReverse(index);
		cs = bitReverse(index + shift);
	}
	else {
		c = index;
		cs = index + shift;
	}	

	vec4 elemk, elemks;

	for (int layer = 0; layer < layerCount; layer++) {
	
		// read Data
		if (pingpong == 0) {
			elemk = imageLoad(pingpong0, ivec3(line, c, layer));
			elemks = imageLoad(pingpong0, ivec3(line, cs, layer));
		}
		else {
			elemk = imageLoad(pingpong1, ivec3(line, c, layer));
			elemks = imageLoad(pingpong1, ivec3(line, cs, layer));
		}

		// Compute
		vec4 cm = complexMultTwice(ww, elemks);
		vec4 r = elemk + cm;
		vec4 rs = elemk - cm;

		// write Data
		if (pingpong == 0) {
			imageStore(pingpong1, ivec3(line, index, layer), r);
			imageStore(pingpong1, ivec3(line, index + shift, layer), rs);
		}
		else {
			imageStore(pingpong0, ivec3(line, index, layer), r);
			imageStore(pingpong0, ivec3(line, index + shift, layer), rs);
		
		}

	}
}	
