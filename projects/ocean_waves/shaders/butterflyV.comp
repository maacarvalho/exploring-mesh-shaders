
layout (local_size_x = 8, local_size_y = 4) in;

// ping pong textures
layout (binding = 0, rgba32f) uniform image2DArray pingpong0;
layout (binding = 1, rgba32f) uniform image2DArray pingpong1;

uniform int pingpong;
uniform int log_width;
uniform int stage;


vec2 complexMult(vec2 v0, vec2 v1) {
	return vec2(v0.x * v1.x - v0.y * v1.y,
				v0.x * v1.y + v0.y * v1.x);
}

 vec4 complexMultTwice(vec2 v0, vec4 v1) {
	return vec4(v0.x * v1.x - v0.y * v1.y,
				v0.x * v1.y + v0.y * v1.x,
				v0.x * v1.z - v0.y * v1.w,
				v0.x * v1.w + v0.y * v1.z);
}


vec2 w(int k, int nn) {
	float it =  2 * k * M_PI / nn;
	return vec2(cos(it), sin(it));
}


void main() {

	vec2 aux, aux1, aux2, raux, rs1, rs2;

	uint line = gl_GlobalInvocationID.x;
	int column = int(gl_GlobalInvocationID.y);
	
	int iter = int(pow(2,log_width-1));

	int halfGroupSize = int(pow(2, stage));
	int groupSize = 2 * halfGroupSize;
	int k = column % halfGroupSize;
	int group = column / halfGroupSize;
	int shift = int(pow(2, stage));
	int groupShift = shift * 2;

	int index = k + group * groupShift;

	vec2 ww;
	vec4 elemk, elemks;
	vec4 elems4, elemss4, elemxz, elemxzs, elemj, elemjs;
	
	// alternate between textures
	if (pingpong == 0) {
		// when stage = 0 use bit reverse indices
		if (stage == 0) {
			uint br = bitfieldReverse(uint(index));
			br = bitfieldExtract(br, 32 - log_width, log_width);
			uint brs = bitfieldReverse(uint(index + shift));
			brs = bitfieldExtract(brs, 32 - log_width, log_width);
			elemk = imageLoad(pingpong0, ivec3(line, br, LAYER_Y_JXY_JXX_JYY));
			elemks = imageLoad(pingpong0, ivec3(line, brs, LAYER_Y_JXY_JXX_JYY));
			elemxz = imageLoad(pingpong0, ivec3(line, br, LAYER_DX_DZ_SX_SZ));
			elemxzs = imageLoad(pingpong0, ivec3(line, brs, LAYER_DX_DZ_SX_SZ));
		}
		else {
			elemk = imageLoad(pingpong0, ivec3(line, index, LAYER_Y_JXY_JXX_JYY));
			elemks = imageLoad(pingpong0, ivec3(line, index + shift, LAYER_Y_JXY_JXX_JYY));
			elemxz = imageLoad(pingpong0, ivec3(line, index, LAYER_DX_DZ_SX_SZ));
			elemxzs = imageLoad(pingpong0, ivec3(line, index + shift, LAYER_DX_DZ_SX_SZ));
		}
		
		// compute the twiddle factor
		ww = w(k, groupShift);
			
		// write the outputs
		vec4 cm = complexMultTwice(ww, elemks);
		imageStore(pingpong1, ivec3(line, index, LAYER_Y_JXY_JXX_JYY), elemk + cm);
		imageStore(pingpong1, ivec3(line, index + shift, LAYER_Y_JXY_JXX_JYY), elemk - cm);

		cm = complexMultTwice(ww,elemxzs);
		imageStore(pingpong1, ivec3(line, index, LAYER_DX_DZ_SX_SZ), elemxz + cm);
		imageStore(pingpong1, ivec3(line, index + shift, LAYER_DX_DZ_SX_SZ), elemxz - cm);
			
	}
	else {
		if (stage == 0) {
			uint br = bitfieldReverse(uint(index));
			br = bitfieldExtract(br, 32 - log_width, log_width);
			uint brs = bitfieldReverse(uint(index + shift));
			brs = bitfieldExtract(brs, 32 - log_width, log_width);
			elemk = imageLoad(pingpong1, ivec3(line, br, LAYER_Y_JXY_JXX_JYY));
			elemks = imageLoad(pingpong1, ivec3(line, brs, LAYER_Y_JXY_JXX_JYY));
			elemxz = imageLoad(pingpong1, ivec3(line, br, LAYER_DX_DZ_SX_SZ));
			elemxzs = imageLoad(pingpong1, ivec3(line, brs, LAYER_DX_DZ_SX_SZ));
		}
		else {	
			elemk = imageLoad(pingpong1, ivec3(line, index, LAYER_Y_JXY_JXX_JYY));
			elemks = imageLoad(pingpong1, ivec3(line, index + shift, LAYER_Y_JXY_JXX_JYY));
			elemxz = imageLoad(pingpong1, ivec3(line, index, LAYER_DX_DZ_SX_SZ));
			elemxzs = imageLoad(pingpong1, ivec3(line, index + shift, LAYER_DX_DZ_SX_SZ));
		}
		ww = w(k, groupShift);
			
		vec4 cm = complexMultTwice(ww, elemks);
		imageStore(pingpong0, ivec3(line, index, LAYER_Y_JXY_JXX_JYY), elemk + cm);
		imageStore(pingpong0, ivec3(line, index + shift, LAYER_Y_JXY_JXX_JYY), elemk - cm);

		cm = complexMultTwice(ww, elemxzs);
		imageStore(pingpong0, ivec3(line, index, LAYER_DX_DZ_SX_SZ), elemxz + cm);
		imageStore(pingpong0, ivec3(line, index + shift, LAYER_DX_DZ_SX_SZ), elemxz - cm);
		
	}
}

