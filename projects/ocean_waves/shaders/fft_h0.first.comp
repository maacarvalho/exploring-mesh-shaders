#version 430

layout (local_size_x = 8, local_size_y = 8) in;

#define M_PI 3.1415926535897932384626433832795
#define G 9.81

uniform int width;
uniform int L;

uniform vec2 windDir;
uniform float windSpeed;
uniform float depth;

uniform int randomDistribution = 1; // Normal distribution
uniform int spectrum;
uniform int dispersionMode = 1;
uniform int directionalMode = 1;
uniform float spectrumScale;

uniform float fetch = 1200000.0;
uniform float swell = 1;
uniform float Hs = 10.0;

// JONSWAP parameters
uniform float JONSWAP_gamma = 3.3;
uniform float JONSWAP_sigmaA = 0.07;
uniform float JONSWAP_sigmaB = 0.09; 

// Bretschneider Param
uniform float Bretschneider_wm = 0.4;

// Ochi parameters
uniform float Ochi_lambda1, Ochi_wm1, Ochi_Hs1, Ochi_lambda2, Ochi_wm2, Ochi_Hs2;


uniform int propagate;

uniform sampler2D noise_i0, texRnd;
layout (binding = 0, rgba32f)   writeonly uniform image2D h0k; 
layout (binding = 1, rgba32f)   writeonly uniform image2D texF; 

layout(std430, binding = 0) buffer oceanInfo{
	vec4 info[];
};


float noise(vec2 k) {
	return texture(noise_i0, k).r;
}

//http://amindforeverprogramming.blogspot.com/2013/07/random-floats-in-glsl-330.html
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}


// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}


// Pseudo-random value in half-open range [0:1].
float random( uvec2  v ) { return floatConstruct(hash(v)); }

