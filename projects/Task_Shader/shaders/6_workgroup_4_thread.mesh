#version 460
#extension GL_NV_mesh_shader : require
 
layout(local_size_x=4) in; 
layout(triangles, max_vertices=256, max_primitives=512) out;
 
perprimitiveNV out PerPrimitiveData 
{
  vec4 color;
} p_out[];

uniform mat4 m_pvm;

vec4 colors[6] = {vec4(1, 0, 0, 1),   // Red
                  vec4(0, 1, 0, 1),   // Green
                  vec4(0, 0, 1, 1),   // Blue
                  vec4(1, 1, 0, 1),   // Yellow
                  vec4(1, 0, 1, 1),   // Purple
                  vec4(0, 1, 1, 1)};  // Cyan

vec4 square_vertices[4] = {vec4(0, 0, 0, 1),
                           vec4(1, 0, 0, 1),
                           vec4(1, 1, 0, 1),
                           vec4(0, 1, 0, 1)};       

void main()
{

  uint local_id  = gl_LocalInvocationID.x;
  uint workg_id  = gl_WorkGroupID.x;
  uint workg_len = gl_WorkGroupSize.x;
  uint no_prim_per_thread = 2;

  // No. Primitives
  gl_PrimitiveCountNV = workg_len * no_prim_per_thread;

  float x_offset = 1.2 * float(local_id);

  // Vertices
  gl_MeshVerticesNV[local_id * 4 + 0].gl_Position 
    = m_pvm * (square_vertices[0] + vec4(x_offset, 1.2 * float(workg_id), 0, 0));
  gl_MeshVerticesNV[local_id * 4 + 1].gl_Position 
    = m_pvm * (square_vertices[1] + vec4(x_offset, 1.2 * float(workg_id), 0, 0));
  gl_MeshVerticesNV[local_id * 4 + 2].gl_Position 
    = m_pvm * (square_vertices[2] + vec4(x_offset, 1.2 * float(workg_id), 0, 0));
  gl_MeshVerticesNV[local_id * 4 + 3].gl_Position 
    = m_pvm * (square_vertices[3] + vec4(x_offset, 1.2 * float(workg_id), 0, 0));

  // Primitives
  gl_PrimitiveIndicesNV[local_id * 6 + 0] = local_id * 4 + 0;
  gl_PrimitiveIndicesNV[local_id * 6 + 1] = local_id * 4 + 1;
  gl_PrimitiveIndicesNV[local_id * 6 + 2] = local_id * 4 + 2;
  gl_PrimitiveIndicesNV[local_id * 6 + 3] = local_id * 4 + 0;
  gl_PrimitiveIndicesNV[local_id * 6 + 4] = local_id * 4 + 2;
  gl_PrimitiveIndicesNV[local_id * 6 + 5] = local_id * 4 + 3;

  // Colors
  const float shade = float(local_id) / float(workg_len) * 0.8 + 0.2;
  p_out[local_id * 2 + 0].color = colors[workg_id] * vec4(shade, shade, shade, 1.0);
  p_out[local_id * 2 + 1].color = colors[workg_id] * vec4(shade, shade, shade, 1.0);

}

