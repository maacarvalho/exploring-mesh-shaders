#version 460
#extension GL_NV_mesh_shader : require
 
layout(local_size_x = 1) in;

taskNV out perTaskData {
  uint divs;
  vec2 gridPlace;
  float gridSpacing;
};

uniform float icols;
uniform float irows;

void main() {

    gridPlace = vec2(gl_WorkGroupID.x % 255, gl_WorkGroupID.x / 255);
    gridSpacing = 2.0 / 255.0;

    // Tessellation Levels
    int ceil_cols = int(ceil(icols));
    ceil_cols += ceil_cols % 2;
    int ceil_rows = int(ceil(irows));
    ceil_rows += ceil_rows % 2;

    // Number of Vertices of the Quad
    int no_verts = (ceil_cols - 1) * (ceil_rows - 1);

    // Maximum number of vertices a Mesh Workgroup can handle
    int mesh_max_verts = 256;
    //int mesh_max_verts = 16;
    
    // Number of Mesh Shader WorkGroups to launch
    int mesh_wg_needed = int(ceil(no_verts / float(mesh_max_verts)));
    divs = 1;
    for (int i=1; i<mesh_max_verts; i++) {

        if (int(ceil(float(ceil_cols + 1) / float(i) + 1)) * 
            int(ceil(float(ceil_rows + 1) / float(i) + 1)) <= mesh_max_verts) {
        //if ( i*i >= mesh_wg_needed * 2 ) {

            divs = i;
            break;
        }

    }

    //divs = 1;
    gl_TaskCountNV = divs * divs;

}
