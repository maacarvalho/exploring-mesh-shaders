void main(void) {

	vec2 hK, hminusK;
	// reset max and min depth;
	info[0] = vec4(0);
	
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	
	int kx = pos.x >= width/2 ? pos.x - width: pos.x;
	int kz = pos.y >= width/2 ? pos.y - width: pos.y;
	float whalf = width / 2.0;

	vec2 k = vec2(kx, kz) * 2 * M_PI/L;
	
	float aux = getSpectrum(spectrum, k, L, windDir, windSpeed, directionalMode, 			
					dispersionMode, propagate, depth, fetch, swell) * spectrumScale;
	
	float p = sqrt(aux * 0.5f);

	float z1, z2;

	// clamp to prevent values equal to zero
	vec4 z = clamp(texelFetch(texRnd, ivec2(gl_GlobalInvocationID.xy), 0), 0.000001, 1.0) ;
	z1 = z.x-0.5;
	z2 = z.y-0.5;

	if (randomDistribution == RANDOM_NORMAL || randomDistribution == RANDOM_LOG) {
		// Box-Muller Transform
		// http://mathworld.wolfram.com/Box-MullerTransformation.html
		z1 = sqrt(-2*log(z.x))*cos(2 * M_PI * z.y);
		z2 = sqrt(-2*log(z.x))*sin(2 * M_PI * z.y);

		// https://www.quora.com/How-do-I-transform-between-log-normal-distribution-and-normal-distribution
		if (randomDistribution == RANDOM_LOG) {
			z1 = exp(z1);
			z2 = exp(z2);
		}
	}
	// https://stats.stackexchange.com/questions/234544/from-uniform-distribution-to-exponential-distribution-and-vice-versa
	else if (randomDistribution == RANDOM_EXP) {
		z1 = -log(z.x);
		z2 = -log(z.y);
	}
	hK = vec2(z1, z2) * p;
	//hK = sqrt(0.5) * vec2(z.x, z.y) * p;
	
	// Box-Muller Transform
	float aux2 = getSpectrum(spectrum, -k, L, windDir, windSpeed, directionalMode, dispersionMode, 
					propagate, depth, fetch, swell) * spectrumScale;
	p = sqrt(aux2 * 0.5);
	
	hminusK = vec2(z1, z2) * p;
	//hminusK = sqrt(0.5) * vec2(z.z, z.w) * p;
	hminusK.y = -hminusK.y;
	
	imageStore(h0k, pos ,vec4(hK, hminusK));

	//imageStore(h0k, pos ,teste);
	//imageStore(h0k, pos ,vec4(dispersionMode, directionalMode, spectrum, spectrumScale));
}

