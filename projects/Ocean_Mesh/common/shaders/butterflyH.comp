

layout (local_size_x = 4, local_size_y = 8) in;

// ping pong textures
layout (binding = 0, rgba32f) uniform image2DArray pingpong0;
layout (binding = 1, rgba32f) uniform image2DArray pingpong1;

uniform int pingpong;
uniform int log_width;
uniform int stage;


vec4 complexMultTwice(vec2 v0, vec4 v1) {
	return vec4(v0.x * v1.x - v0.y * v1.y,
				v0.x * v1.y + v0.y * v1.x,
				v0.x * v1.z - v0.y * v1.w,
				v0.x * v1.w + v0.y * v1.z);
}


vec2 w(int k, int nn) {

	float it =  2 * k * M_PI / nn;
	return vec2(cos(it), sin(it));
}


void main() {
	int line = int(gl_GlobalInvocationID.x);
	uint column = gl_GlobalInvocationID.y;
	
	int iter = int(pow(2,log_width-1));
	
	int halfGroupSize = int(pow(2, stage));
	int groupSize = 2 * halfGroupSize;
	int k = line % halfGroupSize;
	int group = line / halfGroupSize;
	int shift = int(pow(2, stage));
	int groupShift = shift * 2;

	int index = k + group * groupShift;

	vec2 ww = w(k, groupShift);
	
	vec4 elemk, elemks, elemxz, elemxzs; 
	
	// alternate between textures
	if (pingpong == 0) {
		if (stage == 0) {
		// when stage = 0 use bit reverse indices
			uint br = bitfieldReverse(uint(index));
			br = bitfieldExtract(br, 32 - log_width, log_width);
			uint brs = bitfieldReverse(uint(index + shift));
			brs = bitfieldExtract(brs, 32 - log_width, log_width);
			elemk = imageLoad(pingpong0, ivec3(br, column, LAYER_Y_JXY_JXX_JYY));
			elemks = imageLoad(pingpong0, ivec3(brs, column, LAYER_Y_JXY_JXX_JYY));
			elemxz = imageLoad(pingpong0, ivec3(br, column, LAYER_DX_DZ_SX_SZ));
			elemxzs = imageLoad(pingpong0, ivec3(brs, column, LAYER_DX_DZ_SX_SZ));
		}
		else {
			elemk = imageLoad(pingpong0, ivec3(index, column, LAYER_Y_JXY_JXX_JYY));
			elemks = imageLoad(pingpong0, ivec3(index + shift, column, LAYER_Y_JXY_JXX_JYY));
			elemxz = imageLoad(pingpong0, ivec3(index, column, LAYER_DX_DZ_SX_SZ));
			elemxzs = imageLoad(pingpong0, ivec3(index + shift, column, LAYER_DX_DZ_SX_SZ));
		}
		// compute the twiddle factor
		 
			
		// write the outputs
		vec4 cm = complexMultTwice(ww, elemks);
		imageStore(pingpong1, ivec3(index, column, LAYER_Y_JXY_JXX_JYY), elemk + cm);
		imageStore(pingpong1, ivec3(index + shift, column, LAYER_Y_JXY_JXX_JYY), elemk - cm);

		cm = complexMultTwice(ww,elemxzs);
		imageStore(pingpong1, ivec3(index, column, LAYER_DX_DZ_SX_SZ), elemxz + cm);
		imageStore(pingpong1, ivec3(index + shift, column, LAYER_DX_DZ_SX_SZ), elemxz - cm);

	}
	else {
		if (stage == 0) {
			uint br = bitfieldReverse(uint(index));
			br = bitfieldExtract(br, 32 - log_width, log_width);
			uint brs = bitfieldReverse(uint(index + shift));
			brs = bitfieldExtract(brs, 32 - log_width, log_width);
			elemk = imageLoad(pingpong1, ivec3(br, column, LAYER_Y_JXY_JXX_JYY));
			elemks = imageLoad(pingpong1, ivec3(brs, column, LAYER_Y_JXY_JXX_JYY));
			elemxz = imageLoad(pingpong1, ivec3(br, column, LAYER_DX_DZ_SX_SZ));
			elemxzs = imageLoad(pingpong1, ivec3(brs, column, LAYER_DX_DZ_SX_SZ));
		}
		else {	
			elemk = imageLoad(pingpong1, ivec3(index, column, LAYER_Y_JXY_JXX_JYY));
			elemks = imageLoad(pingpong1, ivec3(index + shift, column, LAYER_Y_JXY_JXX_JYY));
			elemxz = imageLoad(pingpong1, ivec3(index, column, LAYER_DX_DZ_SX_SZ));
			elemxzs = imageLoad(pingpong1, ivec3(index + shift, column, LAYER_DX_DZ_SX_SZ));
		}
		//ww = w(k, groupShift);
			
		vec4 cm = complexMultTwice(ww, elemks);
		imageStore(pingpong0, ivec3(index, column, LAYER_Y_JXY_JXX_JYY), elemk + cm);
		imageStore(pingpong0, ivec3(index + shift, column, LAYER_Y_JXY_JXX_JYY), elemk - cm);

		cm = complexMultTwice(ww, elemxzs);
		imageStore(pingpong0, ivec3(index, column, LAYER_DX_DZ_SX_SZ), elemxz + cm);
		imageStore(pingpong0, ivec3(index + shift, column, LAYER_DX_DZ_SX_SZ), elemxz - cm);

	}

}

