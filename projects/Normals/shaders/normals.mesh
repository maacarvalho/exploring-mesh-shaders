#version 460
#extension GL_NV_mesh_shader : enable
 
layout(local_size_x=32) in;
layout(lines, max_vertices=256, max_primitives=512) out;

uniform mat4 m_pvm;
uniform vec4 l_dir;
uniform mat4 m_view;
uniform mat3 m_normal;

uniform float scale;

layout(std430, binding = 1) readonly buffer verticesBuffer
{
  float vertices[];
};

layout(std430, binding = 2) readonly buffer normalsBuffer
{
  float normals[];
};

layout(std430, binding = 3) readonly buffer texcoordsBuffer
{
  float texCoords[];
};

layout(std430, binding = 4) readonly buffer indicesBuffer
{
  uint indices[];
};

layout(std430, binding = 5) readonly buffer primitivesBuffer
{
  uint primitives[];
};

layout(std430, binding = 6) readonly buffer meshletsBuffer
{
  uint meshlets[];
};

void main()
{

  // Inputs
  uint local_id  = gl_LocalInvocationID.x;
  uint global_id  = gl_GlobalInvocationID.x;
  uint meshlet_id = gl_WorkGroupID.x;
  uint workg_len = gl_WorkGroupSize.x;

  // Meshlet Info
  uint indices_start = meshlets[meshlet_id * 4 + 0];
  uint indices_count = meshlets[meshlet_id * 4 + 1];
  uint primitives_start = meshlets[meshlet_id * 4 + 2];
  uint primitives_count = meshlets[meshlet_id * 4 + 3];

  // No. Primitives
  gl_PrimitiveCountNV = primitives_count / 3;

  // Vertices
  uint vertices_per_thread = (indices_count + workg_len - 1) / workg_len;
  for (int i=0; i < vertices_per_thread; i++) {

    uint idx = min (i * workg_len + local_id, indices_count - 1);
    uint vIndex = indices[(indices_start + idx) * 3 + 0];
    uint nIndex = indices[(indices_start + idx) * 3 + 1];

    vec4 vertex = vec4(scale * vertices[vIndex * 4 + 0],
                       scale * vertices[vIndex * 4 + 1],
                       scale * vertices[vIndex * 4 + 2],
                       vertices[vIndex * 4 + 3]);

    vec4 normal = vec4(normals[nIndex * 3 + 0],
                       normals[nIndex * 3 + 1],
                       normals[nIndex * 3 + 2],
                       1.0);

    gl_MeshVerticesNV[idx * 2 + 0].gl_Position = m_pvm * vertex;
    gl_MeshVerticesNV[idx * 2 + 1].gl_Position = m_pvm * (vertex - normalize(normal) * 0.01 * scale);
    
    gl_PrimitiveIndicesNV[idx * 2 + 0] = idx * 2 + 0;
    gl_PrimitiveIndicesNV[idx * 2 + 1] = idx * 2 + 1;
  }  
}
