#version 460
#extension GL_NV_mesh_shader : require
 
layout(local_size_x = 1) in;

taskNV out perTaskData {
  int left_divs;
  int bottom_divs;
  int right_divs;
  int top_divs;
};

uniform float iRows;
uniform float iCols;

uniform float oLeft;
uniform float oBottom;
uniform float oRight;
uniform float oTop;

//layout(std430, binding = 2) writeonly buffer debugBuffer
//{
    //vec4 printf[];
//};

void main() {

    // Tessellation Levels
    int ceil_left = int(ceil(oLeft));
    ceil_left += ceil_left % 2;
    int ceil_bottom = int(ceil(oBottom));
    ceil_bottom += ceil_bottom % 2;
    int ceil_right = int(ceil(oRight));
    ceil_right += ceil_right % 2;
    int ceil_top = int(ceil(oTop));
    ceil_top += ceil_top % 2;
    
    int ceil_cols = int(ceil(iCols));
    ceil_cols += ceil_cols % 2;
    int ceil_rows = int(ceil(iRows));
    ceil_rows += ceil_rows % 2;

    // Number of Vertices of the Quad
    int no_verts_left = (ceil_left + 1) + max(1, ceil_rows - 1);
    int no_verts_bottom = (ceil_bottom + 1) + max(1, ceil_cols - 1);
    int no_verts_right = (ceil_right + 1) + max(1, ceil_rows - 1);
    int no_verts_top = (ceil_top + 1) + max(1, ceil_cols - 1);

    // Maximum number of vertices a Mesh Workgroup can handle
    int mesh_max_verts = 128;
    //int mesh_max_verts = 16;

    // Number of Mesh Shader WorkGroups to launch

    // Left
    int higher_is_down = int(ceil_left >= ceil_rows - 2), higher_is_up = 1 - higher_is_down;
    int ceil_higher = higher_is_down * ceil_left + higher_is_up * ceil_rows, 
        ceil_lesser = higher_is_down * ceil_rows + higher_is_up * ceil_left;

    double min_ratio = pow(2, floor(log2(ceil_higher)) - ceil(log2(ceil_lesser)));
    
    int no_higher_verts = int(floor((mesh_max_verts - 2) / (1 + 1.0 / min_ratio)));
    int no_lesser_verts = int(ceil(float(no_higher_verts) / min_ratio) + 2);

    left_divs = int(ceil(float(ceil_higher + higher_is_down - higher_is_up - 2) / (no_higher_verts - 2)));

    // Bottom
    higher_is_down = int(ceil_bottom >= ceil_cols - 2), higher_is_up = 1 - higher_is_down;
    ceil_higher = higher_is_down * ceil_bottom + higher_is_up * ceil_cols;
    ceil_lesser = higher_is_down * ceil_cols + higher_is_up * ceil_bottom;

    min_ratio = pow(2, floor(log2(ceil_higher)) - ceil(log2(ceil_lesser)));
    
    no_higher_verts = int(floor((mesh_max_verts - 2) / (1 + 1.0 / min_ratio)));
    no_lesser_verts = int(ceil(float(no_higher_verts) / min_ratio) + 2);

    bottom_divs = int(ceil(float(ceil_higher + higher_is_down - higher_is_up - 2) / (no_higher_verts - 2)));

    // Right
    higher_is_down = int(ceil_right >= ceil_rows - 2), higher_is_up = 1 - higher_is_down;
    ceil_higher = higher_is_down * ceil_right + higher_is_up * ceil_rows;
    ceil_lesser = higher_is_down * ceil_rows + higher_is_up * ceil_right;

    min_ratio = pow(2, floor(log2(ceil_higher)) - ceil(log2(ceil_lesser)));
    
    no_higher_verts = int(floor((mesh_max_verts - 2) / (1 + 1.0 / min_ratio)));
    no_lesser_verts = int(ceil(float(no_higher_verts) / min_ratio) + 2);

    right_divs = int(ceil(float(ceil_higher + higher_is_down - higher_is_up - 2) / (no_higher_verts - 2)));

    // Top
    higher_is_down = int(ceil_top >= ceil_cols - 2), higher_is_up = 1 - higher_is_down;
    ceil_higher = higher_is_down * ceil_top + higher_is_up * ceil_cols;
    ceil_lesser = higher_is_down * ceil_cols + higher_is_up * ceil_top;

    min_ratio = pow(2, floor(log2(ceil_higher)) - ceil(log2(ceil_lesser)));
    
    no_higher_verts = int(floor((mesh_max_verts - 2) / (1 + 1.0 / min_ratio)));
    no_lesser_verts = int(ceil(float(no_higher_verts) / min_ratio) + 2);

    top_divs = int(ceil(float(ceil_higher + higher_is_down - higher_is_up - 2) / (no_higher_verts - 2)));

    // Number of Mesh Workgroups to emit
    gl_TaskCountNV = left_divs + bottom_divs + right_divs + top_divs;

}
